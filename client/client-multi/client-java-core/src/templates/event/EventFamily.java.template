/*
 * Copyright 2014-2016 CyberVision, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ${event_family_namespace};

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.kaaproject.kaa.client.context.ExecutorContext;
import org.kaaproject.kaa.client.event.EventFamily;
import org.kaaproject.kaa.client.event.EventManager;
import org.kaaproject.kaa.client.transact.TransactionId;
import org.kaaproject.kaa.common.avro.AvroByteArrayConverter;

public class ${event_family_class_name} implements EventFamily {

    private static final Logger LOG = LoggerFactory.getLogger(${event_family_class_name}.class);

    private final EventManager eventManager;
    private final ExecutorContext executorContext;

    private final Set<Listener> listeners = new HashSet<>();

    public ${event_family_class_name}(EventManager eventManager, ExecutorContext executorContext) {
        super();
        this.eventManager = eventManager;
        this.executorContext = executorContext;
    }

    @Override
    public Set<String> getSupportedEventFqns() {
        Set<String> result = new HashSet<>();

        ${add_supported_event_class_fqns}

        return result;
    }

    @Override
    public void onGenericEvent(String fqn, byte[] data, final String source) {
    
        ${event_family_listeners_on_generic_event}

    }

    public boolean addListener(Listener listener) {
        return listeners.add(listener);
    }

    public boolean removeListener(Listener listener) {
        return listeners.remove(listener);
    }

    ${event_family_send_event_methods}

    public interface Listener {

        ${event_family_listener_methods}
        
    }
}
