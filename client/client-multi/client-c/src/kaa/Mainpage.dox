/*
 * Copyright 2014-2016 CyberVision, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 \mainpage Kaa client C SDK
 \section contents Table of contents
 <ul>
    <li>\link quickstart Quick start \endlink</li>
    <li>\link programminguide Programming guide \endlink</li>
    <li>\link demo Demo application \endlink</li>
 </ul>

 \section quickstart Quick start

 \subsection building Building Kaa C SDK
    To build the Kaa C SDK, do the following:
    @code{.sh}
        $ mkdir build
        $ cd build
        $ cmake ..
        $ make
        $ make install
    @endcode

    Specific build options are described in the <a href='README'>README</a> and <a href="https://docs.kaaproject.org/display/KAA/Endpoint+platforms+integration">in the official online documentation.</a>

 \subsection linkage Link Kaa library to your project

    If you use GNU Compiler, add the linker flag <i>-lkaac</i> to link against a dynamic
    library or <i>-lkaac_s</i> to link against a static library.

 \subsection init_kaa Initializing Kaa library

    <b>Before building a user application with the Kaa library, the developer must implement the following functions in the user-space code:</b>
    <ul>
        <li>@link ext_get_endpoint_public_key @endlink - generate 256-bytes RSA public key</li>
        <li>@link ext_status_store @endlink - persist the Kaa SDK state</li>
        <li>@link ext_status_read @endlink - restore the persisted the Kaa SDK state</li>
    </ul>

    <b>Next, the \c kaa_context_t instance should be created:</b>
    @code
        #include "kaa.h"
        #include "kaa_error.h"
        #include "kaa_common.h"
        #include "kaa_context.h"

        kaa_context_t *kaa_context = NULL;

        kaa_error_t error_code = kaa_init(&kaa_context);
        if (error_code) {
            return error_code;
        }

        /* Some useful work */

        kaa_deinit(kaa_context);
    @endcode

    <b>To communicate with Kaa servers, at least one transport channel must be added for both Bootstrap server and Operations server.</b>

    You may use the reference implementation (\link kaa_tcp_channel_create \endlink) or provide your own channel
    (for more details see \c kaa_transport_channel_interface_t):
    @code
        #include <kaa_channel_manager.h>
        #include <platform/ext_transport_channel.h>
        #include <platform-impl/kaa_tcp_channel.h>

        kaa_extension_id BOOTSTRAP_SERVICE[] = {
            KAA_EXTENSION_BOOTSTRAP,
        };

        const size_t BOOTSTRAP_SERVICE_COUNT = sizeof(BOOTSTRAP_SERVICE) / sizeof(kaa_extension_id);

        kaa_extension_id OPERATIONS_SERVICES[] = {
            KAA_EXTENSION_PROFILE,
            KAA_EXTENSION_USER,
            KAA_EXTENSION_EVENT,
            KAA_EXTENSION_LOGGING,
        };

        const size_t OPERATIONS_SERVICES_COUNT = sizeof(OPERATIONS_SERVICES) / sizeof(kaa_extension_id);

        kaa_transport_channel_interface_t *bootstrap_channel;
        kaa_transport_channel_interface_t *operations_channel;

        error_code = kaa_tcp_channel_create(&operations_channel, kaa_context->logger,
                OPERATIONS_SERVICES, OPERATIONS_SERVICES_COUNT);
        if (error_code) {
            return error_code;
        }

        error_code = kaa_tcp_channel_create(&bootstrap_channel, kaa_context->logger,
                BOOTSTRAP_SERVICE, BOOTSTRAP_SERVICE_COUNT);
        if (error_code) {
            return error_code;
        }

        error_code = kaa_channel_manager_add_transport_channel(kaa_context->channel_manager,
                bootstrap_channel, NULL);
        if (error_code) {
            return error_code;
        }

        error_code = kaa_channel_manager_add_transport_channel(kaa_context->channel_manager,
                operations_channel, NULL);
        if (error_code) {
            return error_code;
        }
    @endcode

    @note To use the log collection feature, go through
    <a href="https://docs.kaaproject.org/display/KAA/Collecting+data+from+endpoints#Collectingdatafromendpoints-Coding">additional initialization steps.</a>

    <b>To finish the Kaa C SDK initialization, execute the following command:</b>
    @code
        kaa_error_t error_code = kaa_start(kaa_context);
        if (error_code) {
            return error_code;
        }
    @endcode

 \section programminguide Programming guide

    For more information about functions supported by the Kaa C SDK, see our <a href="https://docs.kaaproject.org/display/KAA/Programming+guide">Programming guide:</a>
    <ul>
        <li>
            <a href="https://docs.kaaproject.org/display/KAA/Collecting+endpoint+profiles">Collecting endpoint profiles</a>
        </li>
        <li>
            <a href="https://docs.kaaproject.org/display/KAA/Messaging+across+endpoints">Messaging across endpoints</a>
        </li>
        <li>
            <a href="https://docs.kaaproject.org/display/KAA/Collecting+data+from+endpoints">Collecting data from endpoints</a>
        </li>
    </ul>

 \section demo Demo application

    To better familiarize yourself with Kaa C SDK, you may look at our demo application.

    Find the demo source code in the 'example' directory located in the root of the Kaa project.

 */