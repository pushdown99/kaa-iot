/*
 * Copyright 2014-2016 CyberVision, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

# include <stdint.h>
# include "kaa_${event_family_name}.h"

# include "avro_src/avro/io.h"

# include "kaa_common.h"
# include "kaa_event.h"
# include "kaa_error.h"
# include "utilities/kaa_mem.h"

# include "kaa_private.h"

# ifdef kaa_broadcast_event
# undef kaa_broadcast_event
# endif
# define kaa_broadcast_event(context, fqn, fqn_length, event_data, event_data_size) \
    kaa_event_manager_send_event((context), (fqn), (fqn_length), (event_data), (event_data_size), NULL, 0)


typedef struct kaa_${event_family_name}_ {

#foreach ($event in $incomingEventFqns)
#set ($e_name = $StyleUtils.toLowerUnderScore($StyleUtils.removePackageName(${event})))
    on_${prefix}_${e_name} ${e_name}_listener;
    void * ${e_name}_context;
#end

#foreach ($event in $incomingEventFqns)
#set ($e_name = $StyleUtils.toLowerUnderScore($StyleUtils.removePackageName(${event})))
    unsigned char is_${e_name}_callback_added;
#end

} kaa_${event_family_name};

#set ($eventsCount = $incomingEventFqns.size())
static kaa_${event_family_name} listeners = {

#foreach ($event in $incomingEventFqns)
    NULL, NULL,
#end

#foreach ($event in $incomingEventFqns)
#set ($eventsCount = $eventsCount - 1)
    0
#if ($eventsCount > 0),
#end
#end

};

#foreach ($event in $incomingEventFqns)
#set($e_name = $StyleUtils.toLowerUnderScore($StyleUtils.removePackageName(${event})))
static void kaa_event_manager_${e_name}_listener(const char * event_fqn, const char *data, size_t size, kaa_endpoint_id_p event_source)
{
    (void)event_fqn;
    if (listeners.${e_name}_listener) {
        avro_reader_t reader = avro_reader_memory(data, size);
        ${prefix}_${e_name}_t * event = ${prefix}_${e_name}_deserialize(reader);
        avro_reader_free(reader);
        listeners.${e_name}_listener(listeners.${e_name}_context, event, event_source);
    }
}

kaa_error_t kaa_event_manager_set_${prefix}_${e_name}_listener(kaa_event_manager_t *self, on_${prefix}_${e_name} listener, void *context)
{
    KAA_RETURN_IF_NIL(self, KAA_ERR_BADPARAM);
    listeners.${e_name}_listener = listener;
    listeners.${e_name}_context = context;
    if (!listeners.is_${e_name}_callback_added) {
        listeners.is_${e_name}_callback_added = 1;
        return kaa_event_manager_add_on_event_callback(self, "${event}", kaa_event_manager_${e_name}_listener);
    }
    return KAA_ERR_NONE;
}

#end

#foreach ($event in $outgoingEventFqns)
#set($e_name = $StyleUtils.toLowerUnderScore($StyleUtils.removePackageName(${event})))
kaa_error_t kaa_event_manager_send_${prefix}_${e_name}(kaa_event_manager_t *self, ${prefix}_${e_name}_t *event, kaa_endpoint_id_p target)
{
    KAA_RETURN_IF_NIL2(self, event, KAA_ERR_BADPARAM);
#if(!$emptyRecords.contains($event))
    size_t event_size = event->get_size(event);
    char *buffer = (char *)KAA_MALLOC((event_size) * sizeof(char));
    KAA_RETURN_IF_NIL(buffer, KAA_ERR_NOMEM);
    avro_writer_t writer = avro_writer_memory(buffer, event_size);
    if (!writer) {
        KAA_FREE(buffer);
        return KAA_ERR_NOMEM;
    }
    event->serialize(writer, event);
    kaa_error_t result = kaa_event_manager_send_event(self, "${event}", writer->buf, writer->written, target);
    avro_writer_free(writer);
    return result;
#else
    return kaa_event_manager_send_event(self, "${event}", NULL, 0, target);
#end
}

#end

#foreach ($event in $outgoingEventFqns)
#set($e_name = $StyleUtils.toLowerUnderScore($StyleUtils.removePackageName(${event})))
kaa_error_t kaa_event_manager_add_${prefix}_${e_name}_event_to_block(kaa_event_manager_t *self, ${prefix}_${e_name}_t *event, kaa_endpoint_id_p target, kaa_event_block_id trx_id)
{
    KAA_RETURN_IF_NIL2(self, event, KAA_ERR_BADPARAM);
#if(!$emptyRecords.contains($event))
    size_t event_size = event->get_size(event);
    char *buffer = (char *)KAA_MALLOC((event_size) * sizeof(char));
    KAA_RETURN_IF_NIL(buffer, KAA_ERR_NOMEM);
    avro_writer_t writer = avro_writer_memory(buffer, event_size);
    if (!writer) {
        KAA_FREE(buffer);
        return KAA_ERR_NOMEM;
    }
    event->serialize(writer, event);
    kaa_error_t result = kaa_event_manager_add_event_to_transaction(self, trx_id, "${event}", writer->buf, writer->written, target);
    avro_writer_free(writer);
    return result;
#else
    return kaa_event_manager_add_event_to_transaction(self, trx_id, "${event}", NULL, 0, target);
#end
}

#end
