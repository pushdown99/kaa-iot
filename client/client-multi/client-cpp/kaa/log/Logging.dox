/*
 * Copyright 2014-2016 CyberVision, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
    \page logging_page Logging
    
    Log subsystem is based on auto-generated classes according to the log schema
    used during sdk generation.<br>
    <br>
    
    \section usage Usage
    \subsection default_impl Using default implementations
    Kaa library contains default implementation of:
    - log storage;
    - log upload strategy;
    - log upload configuration.

    Log storage default implementation persists log records in memory until records aren't uploaded or application restarts.<br>
    
    For example if we have log schema alike:
    @code
        {
            "name": "ExampleLogRecord",
            "namespace": "org.kaaproject.kaa.client.example",
            "type": "record",
            "fields": [
                {
                    "name": "data",
                    "type": "string"
                }
            ]
        }
    @endcode
    Which will be converted into:
    @code
        struct ExampleLogRecord {
            std::string data;
        };
    @endcode
    To create a log record of "ExampleLogRecord" (assuming Kaa client is initialized and started) use:
    @code
        using namespace kaa;
        ...
        ExampleLogRecord record;
        record.data = "Simple log entry";
        Kaa::getKaaClient().getLogCollector().addLogRecord(record);
    @endcode
    After this record will be added to the storage and LogCollector automatically will
    check if after adding this record it should start log uploading.<br>
    Log upload will start if call to implementation of 
    @link kaa::ILogUploadStrategy::isUploadNeeded(const kaa::ILogUploadConfiguration* configuration, const kaa::ILogStorageStatus* status) @endlink will return 
    @link kaa::LogUploadStrategyDecision::UPLOAD @endlink decision.<br>
    In order to define custom log upload strategy see \ref custom_strategy<br>
    <br>

    \subsection custom_storage  Creating custom log storage
    
    C++ client sdk provides ability to create custom log storage by implementing 
    @link kaa::ILogStorage @endlink interface.<br>
    Once custom log storage implementation is given it is necessary to provide
    @link kaa::ILogStorageStatus @endlink implementation which monitors log storage
    statistics for @link kaa::ILogUploadStrategy @endlink. <br> 
    Use @link kaa::Kaa::getClient().getLogCollector().setStorage(ILogStorage * storage) @endlink 
    and @link kaa::Kaa::getClient().getLogCollector().setStorageStatus(ILogStorageStatus * storage) @endlink 
    to set up custom log storage.<br>
    <br>
    
    \subsection custom_strategy Creating custom log upload strategy
    
    C++ client sdk provides ability to define custom log upload strategy via implementing 
    @link kaa::ILogUploadStrategy @endlink.<br>
    
    Library will invoke @link kaa::ILogUploadStrategy::isUploadNeeded(const kaa::ILogUploadConfiguration* configuration, const kaa::ILogStorageStatus* status) @endlink
    method on each log record is being added.<br>
    This method must return one of @link kaa::LogUploadStrategyDecision @endlink
    where:
    - <b> NOOP </b> means that no operation should be made;
    - <b> UPLOAD </b> means that log collector should start log upload;
    - <b> CLEANUP </b> means that log collector should shrink log storage to fit the log storage available size.
    
    For example if it is needed to upload each log record immediately method 
    @link kaa::ILogUploadStrategy::isUploadNeeded(const kaa::ILogUploadConfiguration* configuration, const kaa::ILogStorageStatus* status) @endlink
    should look like:
    @code
        using namespace kaa;
        class ForceUploadStrategy : public ILogUploadStrategy {
        public:
            LogUploadStrategyDecision isUploadNeeded(const ILogUploadConfiguration* configuration, const ILogStorageStatus* status) {
                return LogUploadStrategyDecision::UPLOAD;
            }
        };
    @endcode
    Set up custom upload strategy by calling 
    @code 
        ILogUploadStrategy * strategy = new ForceUploadStrategy();
        Kaa::getKaaClient().getLogCollector().setUploadStrategy(strategy);
    @endcode
    
    \subsection custom_configuration Creating custom log collector configuration holder
    
    Use @link kaa::ILogUploadConfiguration @endlink to configure log upload parameters.<br>
    By default log upload configuration contains 3 parameters:
    - max size of log block which can be sent on the wire with single request (8 Kb);
    - max size of memory which can log storage occupy (1 Mb); 
    - size of logs when collector should start upload (32 Kb).
    <br>
    
    \section references See also
    - @link kaa::ILogCollector @endlink
    - @link kaa::MemoryLogStorage @endlink
    - @link kaa::DefaultLogUploadConfiguration @endlink
    - @link kaa::SizeUploadStrategy @endlink
    
*/