/*
 * Copyright 2014-2016 CyberVision, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
    \page events_page Event subsystem
    
    Endpoint is able to send or receive events when it is attached to user. See \ref user_page.
    
    Auto-generated headers based on selected event class family schemas can be found
    in <i>kaa/event/gen/</i>.
    
    Event classes definitions are separated into specific namespace for each 
    event class family. Name of this namespace is defined as:<br>
    ns<i>EventClassFamilyName</i>
    
    \section Usage
    For the example, we have one event class family named "ExampleClassFamily":
    @code
        [
            {
                "namespace": "org.kaa.example.events",
                "name": "TestEvent",
                "type": "record",
                "fields": []
            }
        ]
    @endcode
    
    Including header for ExampleClassFamily:
    @code
        #include <kaa/event/gen/ExampleClassFamily.hpp>
    @endcode
    
    Getting ExampleClassFamily instance:
    @code
        using namespace kaa;
        ExampleClassFamily &classFamily = Kaa::getKaaClient().getEventFamilyFactory().getExampleClassFamily();
    @endcode
    
    \subsection sending Sending an event
    
    Sending event to all available recipients:
    @code
        nsExampleClassFamily::TestEvent event;
        classFamily.sendEvent(event);
    @endcode
    or
    @code
        nsExampleClassFamily::TestEvent event;
        classFamily.sendEventToAll(event);
    @endcode

    Sending event to a concrete target:
    @code
        std::string target = "lZjEzq4E/D5aWjXYuG1N2sKYt/U="; // Target's public key hash.
        nsExampleClassFamily::TestEvent event;
        classFamily.sendEvent(event, target);
    @endcode

    Sending bulk of events.<br>
    Event blocks in sdk are identified by TransactionId key.<br>

    Create new empty events block:
    @code
        TransactionIdPtr blockId = Kaa::getKaaClient().getEventFamilyFactory().startEventsBlock();
    @endcode

    Events block can contain events from different event class families.<br>
    Add events to a block:
    @code
        nsExampleClassFamily::TestEvent event1, event2;
        // Sending event1 to a concrete target and broadcasting event2 to all endpoints.
        std::string target = "lZjEzq4E/D5aWjXYuG1N2sKYt/U="; // Target's public key hash.
        classFamily.addEventToBlock(blockId, event1, target);
        classFamily.addEventToBlock(blockId, event2);
    @endcode
    
    If events block is completed use next call to send events:
    @code
        Kaa::getKaaClient().getEventFamilyFactory().submitEventsBlock(blockId);
    @endcode

    In order to remove events block (events will not be sent) use:
    @code
        Kaa::getKaaClient().getEventFamilyFactory().removeEventsBlock(blockId);
    @endcode

    \subsection receiving Receiving an event

    Define event listener:
    @code
        class ExampleEventsListener : public ExampleClassFamily::ExampleClassFamilyListener {
        public: 
            void onEvent(const nsExampleClassFamily::TestEvent &event, const std::string & source = "") {
                std::cout << "Received event!" << std::endl;
            }
        };
    @endcode

    Register event listener:
    @code
        ExampleClassFamily::ExampleClassFamilyListener * listener = new ExampleEventsListener();
        classFamily.addEventFamilyListener(&listener);
    @endcode

    \subsection find_recepients Searching for event recipients

    @code
        class EventRecipientsResolveListener : public IFetchEventListeners {
        public:
            void onEventListenersReceived(const std::vector<std::string >& eventListeners) {
                for (const auto &target : eventListeners) {
                    std::cout << "Recipient key hash = " << target << std::endl;
                }
            }
            
            void onRequestFailed() {
                std::cout << "Failed to find recipients of event org.kaa.example.events.TestEvent" << std::endl;
            }
        };
        
        IFetchEventListeners *listener = new EventRecipientsResolveListener();
        std::list<std::string > fqns = { "org.kaa.example.events.TestEvent" };
        
        Kaa::getKaaClient().getEventListenersResolver().findEventListeners(fqns, listener);
    @endcode
    
    <b>NOTE:</b> Passing multiple events fqns means that recipient MUST support 
    receiving ALL mentioned events.
    
    \section References
    \subpage user_page
*/