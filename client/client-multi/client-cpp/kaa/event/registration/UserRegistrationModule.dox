/*
 * Copyright 2014-2016 CyberVision, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
    \page user_page User registration
    
    \section Description
    In order to have ability to send and (or) receive events an application must
    be attached to the user entity in Kaa ecosystem. User registration module 
    gives API to manage endpoint-to-user attachments.<br>
    <br>
    In scope of this C++ endpoint sdk provides next functionality:
    - \ref attach_current "Attach current endpoint to user entity";
    - \ref attach_other "Attach other endpoint to user entity";
    - \ref detach_any "Detach endpoint from user entity".
    <br>
    
    If endpoint is assumed to be attached or detached by another application it
    is possible to set up callback for notifications when this endpoint becomes 
    attached or detached. See \ref callbacks.<br>
    <br>
    All operations being described on this page are run in asynchronous mode. Thus, 
    in order to retrieve result for each operation an appropriate callback should be registered.
    Callbacks for attach/detach operations must be inherited from @link kaa::IEndpointAttachStatusListener @endlink
    interface and passed to a relevant method.
    
    \section Usage
    \subsection check_attachement Checking attachment status
    To check if endpoint is attached to user invoke @link kaa::IEndpointRegistrationManager::isCurrentEndpointAttached() @endlink :
    @code
        using namespace kaa;
        
        bool isAttached = Kaa::getKaaClient().getEndpointRegistrationManager().isCurrentEndpointAttached();
        ...
    @endcode
    \subsection attach_current Attaching current endpoint

    To attach current application instance to a user invoke @link kaa::IEndpointRegistrationManager::attachUser(const std::string& userExternalId, const std::string& userAccessToken, IEndpointAttachStatusListener* listener) @endlink<br>
    Example:
    @code
        using namespace kaa;
        
        class DummyAttachListener : public IEndpointAttachStatusListener {
        public:
            void onAttachSuccess(const std::string& userExternalId, const std::string& endpointAccessToken) {
                std::cout << "Attached to user" << std::endl; 
            }
            void onAttachFailure() {
                std::cout << "Failed to attach to user" << std::endl;
            }
            void onDetachSuccess(const std::string& endpointAccessToken) {
                std::cout << "Detached from user" << std::endl;
            }
            void onDetachFailure() {
                std::cout << "Failed to detach from user" << std::endl;
            }
        };
        
        IEndpointAttachStatusListener listener = new DummyAttachListener();
        std::string userExternalId = "devuser@foo.bar";
        std::string userAccessToken = "devuser@foo.bar";
        Kaa::getKaaClient().getEndpointRegistrationManager().attachUser(userExternalId, userAccessToken, listener);
        ...
    @endcode
    
    \subsection attach_other Attaching other endpoint
    
    To attach another application instance to a user invoke @link kaa::IEndpointRegistrationManager::attachEndpoint(const std::string&  endpointAccessToken, IEndpointAttachStatusListener* listener) @endlink<br>
    Use endpoint access token - unique string identifier of an endpoint in Kaa ecosystem - to attach it to user.<br> 
    <br>
    <b>NOTE:</b> Only attached endpoints are allowed to attach other application instances to a user. <br>
    Example:
    @code
        using namespace kaa;
        
        class DummyAttachListener : public IEndpointAttachStatusListener {
        public:
            void onAttachSuccess(const std::string& userExternalId, const std::string& endpointAccessToken) {
                std::cout << "Attached to user" << std::endl; 
            }
            void onAttachFailure() {
                std::cout << "Failed to attach to user" << std::endl;
            }
            void onDetachSuccess(const std::string& endpointAccessToken) {
                std::cout << "Detached from user" << std::endl;
            }
            void onDetachFailure() {
                std::cout << "Failed to detach from user" << std::endl;
            }
        };
        
        IEndpointAttachStatusListener listener = new DummyAttachListener();
        std::string endpointAccessToken = "10b1e314-b6be-49af-88ad-caf601815d93";
        Kaa::getKaaClient().getEndpointRegistrationManager().attachEndpoint(endpointAccessToken, listener);
        ...
    @endcode
    \subsection detach_any Detaching endpoint
    
    Use endpoint key hash in order to detach endpoint from user entity.
    <br>
    <b>NOTE:</b> Only attached endpoints are allowed to detach other application instances from a user. <br>
    <br>
    Detaching other endpoint by its public key hash:
    @code
        using namespace kaa;
        
        class DummyDetachListener : public IEndpointAttachStatusListener {
        public:
            void onAttachSuccess(const std::string& userExternalId, const std::string& endpointAccessToken) {
                std::cout << "Attached to user" << std::endl; 
            }
            void onAttachFailure() {
                std::cout << "Failed to attach to user" << std::endl;
            }
            void onDetachSuccess(const std::string& endpointAccessToken) {
                std::cout << "Detached from user" << std::endl;
            }
            void onDetachFailure() {
                std::cout << "Failed to detach from user" << std::endl;
            }
        };
        
        std::string epToDetach = "lZjEzq4E/D5aWjXYuG1N2sKYt/U="; // endpoint's public key hash.
        IEndpointAttachStatusListener listener = new DummyDetachListener();
        Kaa::getKaaClient().getEndpointRegistrationManager().detachEndpoint(epToDetach, listener);
        ...
    @endcode
    Detaching current endpoint:
    @code
        using namespace kaa;
        
        class DummyDetachListener : public IEndpointAttachStatusListener {
        public:
            void onAttachSuccess(const std::string& userExternalId, const std::string& endpointAccessToken) {
                std::cout << "Attached to user" << std::endl; 
            }
            void onAttachFailure() {
                std::cout << "Failed to attach to user" << std::endl;
            }
            void onDetachSuccess(const std::string& endpointAccessToken) {
                std::cout << "Detached from user" << std::endl;
            }
            void onDetachFailure() {
                std::cout << "Failed to detach from user" << std::endl;
            }
        };
        
        IEndpointAttachStatusListener listener = new DummyDetachListener();
        Kaa::getKaaClient().getEndpointRegistrationManager().detachEndpoint(listener);
        ...
    @endcode
    \subsection callbacks Setting callbacks for attach/detach notifications
    
    Set callback for attach/detach notification if assuming endpoint to be 
    detached by other application instance:
    @code
        using namespace kaa;
        
        class DummyAttachNotificationListener : public IEndpointAttachStatusListener {
        public:
            void onAttachSuccess(const std::string& userExternalId, const std::string& endpointAccessToken) {
                std::cout << "Attached to user" << std::endl; 
            }
            void onAttachFailure() {
                std::cout << "Failed to attach to user" << std::endl;
            }
            void onDetachSuccess(const std::string& endpointAccessToken) {
                std::cout << "Detached from user" << std::endl;
            }
            void onDetachFailure() {
                std::cout << "Failed to detach from user" << std::endl;
            }
        };
        
        IEndpointAttachStatusListener listener = new DummyAttachNotificationListener();
        Kaa::getKaaClient().getEndpointRegistrationManager().setAttachStatusListener(listener);
        ...
    @endcode
    \section References
    -   \ref events_page "Events sybsystem"
*/