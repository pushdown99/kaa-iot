/*
 * Copyright 2014-2016 CyberVision, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 \mainpage Kaa client C++ sdk
 \section contents Table of contents
 - \ref main
 - \subpage profile_management_page
 - \subpage notification_management_page
 - \subpage configuration_page
 - \subpage events_page
 - \subpage logging_page
 
 \section main Quick start
 \subsection compiling Compiling C++ sdk
    Before compiling, ensure that all
    \htmlonly 
    <a onclick='window.open("http://docs.kaaproject.org/display/KAA/Installation+guide#Installationguide-C++endpointbuildenvironmentsetup")'>required libraries</a> 
    \endhtmlonly
    are installed.<br>
    To compile Kaa client C++ sdk use shell script <i>build.sh</i> distributed 
    within sdk archive.<br>
    @code
        $ ./avrogen.sh
        $ ./build.sh install
    @endcode
    
 \subsection linkage Link Kaa library to your project
    
    If you use GNU Compiler add linker flag <i>-lkaacpp</i> to link against dynamic 
    library or <i>-lkaacpp_s</i> to link against static library.<br>
     
 \subsection init_kaa Initializing Kaa library
    
    Kaa client C++ sdk requires @link kaa::AbstractProfileContainer @endlink implementation for 
    successful endpoint registration. See \ref profile_management_page for details.<br>
    <br>
    Optionally you may set configuration and configuration schema persistent 
    storages by providing instances of @link kaa::IConfigurationStorage @endlink 
    and @link kaa::ISchemaStorage @endlink. See \ref setup_configuration_storage 
    and \ref setup_configuration_schema_storage for the details. <br>
    <br>
    <b>NOTE:</b> These options MUST be set after <i>Kaa::init();</i> is called.<br>
    <br>
    Use <i>Kaa::start();</i> when Kaa C++ sdk is tuned to start Kaa 
    client-server communication.<br>
    <br>
    All Kaa functionality MUST be accessed through @link kaa::IKaaClient @endlink interface.
    @code
        using namespace kaa;
        Kaa::init(0);
        IKaaClient& client = Kaa::getKaaClient();
        // Initializing profile container, persistent storages etc.
        Kaa::start();
    @endcode
    
 \subsection debug_info Collecting C++ sdk debug information
    
    By default Kaa client C++ sdk uses Boost::Log library to collect debug information.<br>
    <br>
    If it is needed to integrate Kaa logs into existing debug info collecting system -
    provide implementation of @link kaa::ILogger @endlink interface and use 
    @link kaa::LoggerFactory::initLogger(LoggerPtr logger) @endlink to reset default logger.
    
    @code
        using namespace kaa;
        class MyLogger : public ILogger {
        public:
            // implement pure virtual functions from interface.
        };
        ...
        LoggerFactory::initLogger(LoggerPtr(new MyLogger()));
    @endcode
    <br>
    <br>
 
 */