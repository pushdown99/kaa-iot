#*
 * Copyright 2014-2016 CyberVision, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *#

#set ($PREFIX = $StyleUtils.toUpperUnderScore($namespacePrefix))
#set ($prefix = $StyleUtils.toLowerUnderScore($namespacePrefix))
#set ($record_name = $StyleUtils.toLowerUnderScore($schema.getName()))
#set ($is_destructor_needed = $TypeConverter.isRecordNeedDeallocator($schema))
#if ($is_destructor_needed)
static void ${prefix}_${record_name}_destroy(void *data)
{
    if (data) {
        ${prefix}_${record_name}_t *record = (${prefix}_${record_name}_t *)data;

#foreach ($field in $schema.getFields())
#set ($field_name = $StyleUtils.toLowerUnderScore($field.name()))
#set ($field_schema = $field.schema())
#if ($TypeConverter.isAvroRecord($field_schema) || $TypeConverter.isAvroUnion($field_schema))
        if (record->${field_name} && record->${field_name}->destroy) {
            record->${field_name}->destroy(record->${field_name});
        }
#elseif ($TypeConverter.isAvroBytes($field_schema))
        kaa_bytes_destroy(record->${field_name});
#elseif ($TypeConverter.isAvroFixed($field_schema))
        kaa_fixed_destroy(record->${field_name});
#elseif ($TypeConverter.isAvroString($field_schema))
        kaa_string_destroy(record->${field_name});
#elseif ($TypeConverter.isAvroArray($field_schema))
#set ($array_element_schema = $field_schema.getElementType())
    #if ($TypeConverter.isAvroRecord($array_element_schema))
        #if ($TypeConverter.isRecordNeedDeallocator($array_element_schema))
        #set ($array_record_name = $StyleUtils.toLowerUnderScore($array_element_schema.getName()))
        kaa_list_destroy(record->${field_name}, ${prefix}_${array_record_name}_destroy);
        #else
        kaa_list_destroy(record->${field_name}, kaa_data_destroy);
    #end
    #elseif ($TypeConverter.isAvroUnion($array_element_schema))
    #set ($array_union_name = $TypeConverter.generateUnionName($PREFIX, $array_element_schema).toLowerCase())
        kaa_list_destroy(record->${field_name}, ${array_union_name}_destroy);
    #elseif ($TypeConverter.isAvroBytes($array_element_schema))
        kaa_list_destroy(record->${field_name}, kaa_bytes_destroy);
    #elseif ($TypeConverter.isAvroFixed($array_element_schema))
        kaa_list_destroy(record->${field_name}, kaa_fixed_destroy);
    #elseif ($TypeConverter.isAvroString($array_element_schema))
        kaa_list_destroy(record->${field_name}, kaa_string_destroy);
    #elseif ($TypeConverter.isAvroPrimitive($array_element_schema))
        kaa_list_destroy(record->${field_name}, kaa_data_destroy);
    #end
#end
#end
        kaa_data_destroy(record);
    }
}
#end

#if ($TypeConverter.isTypeOut($schema))
#if ($schema.getFields().size() > 0)
static void ${prefix}_${record_name}_serialize(avro_writer_t writer, void *data)
{
    if (data) {
        ${prefix}_${record_name}_t *record = (${prefix}_${record_name}_t *)data;

#foreach ($field in $schema.getFields())
#set ($field_name = $StyleUtils.toLowerUnderScore($field.name()))
#set ($field_schema = $field.schema())
#if ($TypeConverter.isAvroRecord($field_schema) && $field_schema.getFields().size() > 0)
        record->${field_name}->serialize(writer, record->${field_name});
#elseif ($TypeConverter.isAvroUnion($field_schema))
        record->${field_name}->serialize(writer, record->${field_name});
#elseif ($TypeConverter.isAvroBytes($field_schema))
        kaa_bytes_serialize(writer, record->${field_name});
#elseif ($TypeConverter.isAvroFixed($field_schema))
        kaa_fixed_serialize(writer, record->${field_name});
#elseif ($TypeConverter.isAvroString($field_schema))
        kaa_string_serialize(writer, record->${field_name});
#elseif ($TypeConverter.isAvroPrimitive($field_schema))
#set ($primitive_type = $field_schema.getType().toString().toLowerCase())
        kaa_${primitive_type}_serialize(writer, &record->${field_name});
#elseif ($TypeConverter.isAvroArray($field_schema))
#set ($array_element_schema = $field_schema.getElementType())
    #if ($TypeConverter.isAvroRecord($array_element_schema))
        #if ($array_element_schema.getFields().size() > 0)
        #set ($record_element_name = $StyleUtils.toLowerUnderScore($array_element_schema.getName()))
        kaa_array_serialize(writer, record->${field_name}, ${prefix}_${record_element_name}_serialize);
        #else
        kaa_array_serialize(writer, record->${field_name}, NULL);
        #end
    #elseif ($TypeConverter.isAvroUnion($array_element_schema))
    #set ($union_element_name = $TypeConverter.generateUnionName($PREFIX, $array_element_schema).toLowerCase())
        kaa_array_serialize(writer, record->${field_name}, ${union_element_name}_serialize);
    #elseif ($TypeConverter.isAvroBytes($array_element_schema))
        kaa_array_serialize(writer, record->${field_name}, kaa_bytes_serialize);
    #elseif ($TypeConverter.isAvroFixed($array_element_schema))
        kaa_array_serialize(writer, record->${field_name}, kaa_fixed_serialize);
    #elseif ($TypeConverter.isAvroString($array_element_schema))
        kaa_array_serialize(writer, record->${field_name}, kaa_string_serialize);
    #elseif ($TypeConverter.isAvroPrimitive($array_element_schema))
    #set ($primitive_type = $array_element_schema.getType().toString().toLowerCase())
        kaa_array_serialize(writer, record->${field_name}, kaa_${primitive_type}_serialize);
    #end
#end
#end
    }
}

static size_t ${prefix}_${record_name}_get_size(void *data)
{
    if (data) {
        size_t record_size = 0;
        ${prefix}_${record_name}_t *record = (${prefix}_${record_name}_t *)data;

#foreach ($field in $schema.getFields())
#set ($field_name = $StyleUtils.toLowerUnderScore($field.name()))
#set ($field_schema = $field.schema())
#if ($TypeConverter.isAvroRecord($field_schema) && $field_schema.getFields().size() > 0)
        record_size += record->${field_name}->get_size(record->${field_name});
#elseif ($TypeConverter.isAvroUnion($field_schema))
        record_size += record->${field_name}->get_size(record->${field_name});
#elseif ($TypeConverter.isAvroBytes($field_schema))
        record_size += kaa_bytes_get_size(record->${field_name});
#elseif ($TypeConverter.isAvroFixed($field_schema))
        record_size += kaa_fixed_get_size(record->${field_name});
#elseif ($TypeConverter.isAvroString($field_schema))
        record_size += kaa_string_get_size(record->${field_name});
#elseif ($TypeConverter.isAvroFloat($field_schema))
        record_size += AVRO_FLOAT_SIZE;
#elseif ($TypeConverter.isAvroDouble($field_schema))
        record_size += AVRO_DOUBLE_SIZE;
#elseif ($TypeConverter.isAvroPrimitive($field_schema))
#set ($primitive_type = $field_schema.getType().toString().toLowerCase())
        record_size += kaa_${primitive_type}_get_size(&record->${field_name});
#elseif ($TypeConverter.isAvroArray($field_schema))
#set ($array_element_schema = $field_schema.getElementType())
    #if ($TypeConverter.isAvroRecord($array_element_schema))
        #if ($array_element_schema.getFields().size() > 0)
        #set ($array_record_name = $StyleUtils.toLowerUnderScore($array_element_schema.getName()))
        record_size += kaa_array_get_size(record->${field_name}, ${prefix}_${array_record_name}_get_size);
        #else
        record_size += kaa_array_get_size(record->${field_name}, kaa_null_get_size);
        #end
    #elseif ($TypeConverter.isAvroUnion($array_element_schema))
    #set ($array_union_name = $TypeConverter.generateUnionName($PREFIX, $array_element_schema).toLowerCase())
        record_size += kaa_array_get_size(record->${field_name}, ${array_union_name}_get_size);
    #elseif ($TypeConverter.isAvroBytes($array_element_schema))
        record_size += kaa_array_get_size(record->${field_name}, kaa_bytes_get_size);
    #elseif ($TypeConverter.isAvroFixed($array_element_schema))
        record_size += kaa_array_get_size(record->${field_name}, kaa_fixed_get_size);
    #elseif ($TypeConverter.isAvroString($array_element_schema))
        record_size += kaa_array_get_size(record->${field_name}, kaa_string_get_size);
    #elseif ($TypeConverter.isAvroPrimitive($array_element_schema))
    #set ($primitive_type = $array_element_schema.getType().toString().toLowerCase())
        record_size += kaa_array_get_size(record->${field_name}, kaa_${primitive_type}_get_size);
    #end
#end
#end

        return record_size;
    }

    return 0;
}
#end

${prefix}_${record_name}_t *${prefix}_${record_name}_create(void)
{
    ${prefix}_${record_name}_t *record = 
            (${prefix}_${record_name}_t *)KAA_CALLOC(1, sizeof(${prefix}_${record_name}_t));

    if (record) {
#if ($schema.getFields().size() > 0)
        record->serialize = ${prefix}_${record_name}_serialize;
        record->get_size = ${prefix}_${record_name}_get_size;
#else
        record->serialize = kaa_null_serialize;
        record->get_size = kaa_null_get_size;
#end
#if ($is_destructor_needed)
        record->destroy = ${prefix}_${record_name}_destroy;
#else
        record->destroy = kaa_data_destroy;
#end
    }

    return record;
}
#end
#if ($TypeConverter.isTypeIn($schema))

${prefix}_${record_name}_t *${prefix}_${record_name}_deserialize(avro_reader_t reader)
{
    ${prefix}_${record_name}_t *record = 
            (${prefix}_${record_name}_t *)KAA_MALLOC(sizeof(${prefix}_${record_name}_t));

    if (record) {
#if ($TypeConverter.isTypeOut($schema))
#if ($schema.getFields().size() > 0)
        record->serialize = ${prefix}_${record_name}_serialize;
        record->get_size = ${prefix}_${record_name}_get_size;
#else
        record->serialize = kaa_null_serialize;
        record->get_size = kaa_null_get_size;
#end
#end
#if ($is_destructor_needed)
        record->destroy = ${prefix}_${record_name}_destroy;
#else
        record->destroy = kaa_data_destroy;
#end

#foreach ($field in $schema.getFields())
#set ($field_name = $StyleUtils.toLowerUnderScore($field.name()))
#set ($field_schema = $field.schema())
#if ($TypeConverter.isAvroRecord($field_schema))
#set ($record_field_name = $StyleUtils.toLowerUnderScore($field_schema.getName()))
        record->$field_name = ${prefix}_${record_field_name}_deserialize(reader);
#elseif ($TypeConverter.isAvroUnion($field_schema))
#set ($union_field_name = $TypeConverter.generateUnionName($PREFIX, $field_schema).toLowerCase())
        record->$field_name = ${union_field_name}_deserialize(reader);
#elseif ($TypeConverter.isAvroBytes($field_schema))
        record->${field_name} = kaa_bytes_deserialize(reader);
#elseif ($TypeConverter.isAvroFixed($field_schema))
        size_t ${field_name}_fixed_size = $field_schema.getFixedSize();
        record->${field_name} = kaa_fixed_deserialize(reader, &${field_name}_fixed_size);
#elseif ($TypeConverter.isAvroString($field_schema))
        record->${field_name} = kaa_string_deserialize(reader);
#elseif ($TypeConverter.isAvroEnum($field_schema))
        int64_t ${field_name}_value;
        avro_binary_encoding.read_long(reader, &${field_name}_value);
        record->$field_name = ${field_name}_value;
#elseif ($TypeConverter.isAvroPrimitive($field_schema))
#set ($primitive_type = $field_schema.getType().toString().toLowerCase())
        avro_binary_encoding.read_${primitive_type}(reader, &record->${field_name});
#elseif ($TypeConverter.isAvroArray($field_schema))
#set ($array_element_schema = $field_schema.getElementType())
    #if ($TypeConverter.isAvroRecord($array_element_schema))
    #set ($record_element_name = $StyleUtils.toLowerUnderScore($array_element_schema.getName()))
        record->${field_name} = kaa_array_deserialize_wo_ctx(reader, (deserialize_wo_ctx_fn)${prefix}_${record_element_name}_deserialize);
    #elseif ($TypeConverter.isAvroUnion($array_element_schema))
    #set ($union_element_name = $TypeConverter.generateUnionName($PREFIX, $array_element_schema).toLowerCase())
        record->${field_name} = kaa_array_deserialize_wo_ctx(reader, (deserialize_wo_ctx_fn)${union_element_name}_deserialize);
    #elseif ($TypeConverter.isAvroBytes($array_element_schema))
        record->${field_name} = kaa_array_deserialize_wo_ctx(reader, (deserialize_wo_ctx_fn)kaa_bytes_deserialize);
    #elseif ($TypeConverter.isAvroFixed($array_element_schema))
        size_t ${field_name}_fixed_size = $array_element_schema.getFixedSize();
        record->${field_name} = kaa_array_deserialize_w_ctx(reader, (deserialize_w_ctx_fn)kaa_fixed_deserialize, &${field_name}_fixed_size);
    #elseif ($TypeConverter.isAvroString($array_element_schema))
        record->${field_name} = kaa_array_deserialize_wo_ctx(reader, (deserialize_wo_ctx_fn)kaa_string_deserialize);
    #elseif ($TypeConverter.isAvroPrimitive($array_element_schema))
    #set ($primitive_type = $array_element_schema.getType().toString().toLowerCase())
        record->${field_name} = kaa_array_deserialize_wo_ctx(reader, (deserialize_wo_ctx_fn)kaa_${primitive_type}_deserialize);
    #end
#end
#end
    }

    return record;
}
#end

