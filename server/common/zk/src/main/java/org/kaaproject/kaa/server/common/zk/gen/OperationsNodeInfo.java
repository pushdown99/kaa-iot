/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.kaaproject.kaa.server.common.zk.gen;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OperationsNodeInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OperationsNodeInfo\",\"namespace\":\"org.kaaproject.kaa.server.common.zk.gen\",\"fields\":[{\"name\":\"connectionInfo\",\"type\":{\"type\":\"record\",\"name\":\"ConnectionInfo\",\"fields\":[{\"name\":\"thriftHost\",\"type\":\"string\"},{\"name\":\"thriftPort\",\"type\":\"int\"},{\"name\":\"publicKey\",\"type\":[\"bytes\",\"null\"]}]}},{\"name\":\"loadInfo\",\"type\":{\"type\":\"record\",\"name\":\"LoadInfo\",\"fields\":[{\"name\":\"endpointCount\",\"type\":\"int\"},{\"name\":\"loadAverage\",\"type\":\"double\"}]}},{\"name\":\"timeStarted\",\"type\":\"long\"},{\"name\":\"transports\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TransportMetaData\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"minSupportedVersion\",\"type\":\"int\"},{\"name\":\"maxSupportedVersion\",\"type\":\"int\"},{\"name\":\"connectionInfo\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"VersionConnectionInfoPair\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"conenctionInfo\",\"type\":\"bytes\"}]}}}]}}}]}");
  private org.kaaproject.kaa.server.common.zk.gen.ConnectionInfo connectionInfo;
  private org.kaaproject.kaa.server.common.zk.gen.LoadInfo loadInfo;
  private long timeStarted;
  private java.util.List<org.kaaproject.kaa.server.common.zk.gen.TransportMetaData> transports;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}.
   */
  public OperationsNodeInfo() {
  }

  /**
   * All-args constructor.
   */
  public OperationsNodeInfo(org.kaaproject.kaa.server.common.zk.gen.ConnectionInfo connectionInfo, org.kaaproject.kaa.server.common.zk.gen.LoadInfo loadInfo, java.lang.Long timeStarted, java.util.List<org.kaaproject.kaa.server.common.zk.gen.TransportMetaData> transports) {
    this.connectionInfo = connectionInfo;
    this.loadInfo = loadInfo;
    this.timeStarted = timeStarted;
    this.transports = transports;
  }

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  /**
   * Creates a new OperationsNodeInfo RecordBuilder
   */
  public static org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder newBuilder() {
    return new org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder();
  }

  /**
   * Creates a new OperationsNodeInfo RecordBuilder by copying an existing Builder
   */
  public static org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder newBuilder(org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder other) {
    return new org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder(other);
  }

  /**
   * Creates a new OperationsNodeInfo RecordBuilder by copying an existing OperationsNodeInfo
   * instance
   */
  public static org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder newBuilder(org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo other) {
    return new org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder(other);
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return connectionInfo;
      case 1:
        return loadInfo;
      case 2:
        return timeStarted;
      case 3:
        return transports;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        connectionInfo = (org.kaaproject.kaa.server.common.zk.gen.ConnectionInfo) value$;
        break;
      case 1:
        loadInfo = (org.kaaproject.kaa.server.common.zk.gen.LoadInfo) value$;
        break;
      case 2:
        timeStarted = (java.lang.Long) value$;
        break;
      case 3:
        transports = (java.util.List<org.kaaproject.kaa.server.common.zk.gen.TransportMetaData>) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'connectionInfo' field.
   */
  public org.kaaproject.kaa.server.common.zk.gen.ConnectionInfo getConnectionInfo() {
    return connectionInfo;
  }

  /**
   * Sets the value of the 'connectionInfo' field.
   *
   * @param value the value to set.
   */
  public void setConnectionInfo(org.kaaproject.kaa.server.common.zk.gen.ConnectionInfo value) {
    this.connectionInfo = value;
  }

  /**
   * Gets the value of the 'loadInfo' field.
   */
  public org.kaaproject.kaa.server.common.zk.gen.LoadInfo getLoadInfo() {
    return loadInfo;
  }

  /**
   * Sets the value of the 'loadInfo' field.
   *
   * @param value the value to set.
   */
  public void setLoadInfo(org.kaaproject.kaa.server.common.zk.gen.LoadInfo value) {
    this.loadInfo = value;
  }

  /**
   * Gets the value of the 'timeStarted' field.
   */
  public java.lang.Long getTimeStarted() {
    return timeStarted;
  }

  /**
   * Sets the value of the 'timeStarted' field.
   *
   * @param value the value to set.
   */
  public void setTimeStarted(java.lang.Long value) {
    this.timeStarted = value;
  }

  /**
   * Gets the value of the 'transports' field.
   */
  public java.util.List<org.kaaproject.kaa.server.common.zk.gen.TransportMetaData> getTransports() {
    return transports;
  }

  /**
   * Sets the value of the 'transports' field.
   *
   * @param value the value to set.
   */
  public void setTransports(java.util.List<org.kaaproject.kaa.server.common.zk.gen.TransportMetaData> value) {
    this.transports = value;
  }

  /**
   * RecordBuilder for OperationsNodeInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OperationsNodeInfo>
      implements org.apache.avro.data.RecordBuilder<OperationsNodeInfo> {

    private org.kaaproject.kaa.server.common.zk.gen.ConnectionInfo connectionInfo;
    private org.kaaproject.kaa.server.common.zk.gen.LoadInfo loadInfo;
    private long timeStarted;
    private java.util.List<org.kaaproject.kaa.server.common.zk.gen.TransportMetaData> transports;

    /**
     * Creates a new Builder
     */
    private Builder() {
      super(org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder
     */
    private Builder(org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.connectionInfo)) {
        this.connectionInfo = data().deepCopy(fields()[0].schema(), other.connectionInfo);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.loadInfo)) {
        this.loadInfo = data().deepCopy(fields()[1].schema(), other.loadInfo);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timeStarted)) {
        this.timeStarted = data().deepCopy(fields()[2].schema(), other.timeStarted);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.transports)) {
        this.transports = data().deepCopy(fields()[3].schema(), other.transports);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing OperationsNodeInfo instance
     */
    private Builder(org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo other) {
      super(org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.connectionInfo)) {
        this.connectionInfo = data().deepCopy(fields()[0].schema(), other.connectionInfo);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.loadInfo)) {
        this.loadInfo = data().deepCopy(fields()[1].schema(), other.loadInfo);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timeStarted)) {
        this.timeStarted = data().deepCopy(fields()[2].schema(), other.timeStarted);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.transports)) {
        this.transports = data().deepCopy(fields()[3].schema(), other.transports);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Gets the value of the 'connectionInfo' field
     */
    public org.kaaproject.kaa.server.common.zk.gen.ConnectionInfo getConnectionInfo() {
      return connectionInfo;
    }

    /**
     * Sets the value of the 'connectionInfo' field
     */
    public org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder setConnectionInfo(org.kaaproject.kaa.server.common.zk.gen.ConnectionInfo value) {
      validate(fields()[0], value);
      this.connectionInfo = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'connectionInfo' field has been set
     */
    public boolean hasConnectionInfo() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'connectionInfo' field
     */
    public org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder clearConnectionInfo() {
      connectionInfo = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'loadInfo' field
     */
    public org.kaaproject.kaa.server.common.zk.gen.LoadInfo getLoadInfo() {
      return loadInfo;
    }

    /**
     * Sets the value of the 'loadInfo' field
     */
    public org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder setLoadInfo(org.kaaproject.kaa.server.common.zk.gen.LoadInfo value) {
      validate(fields()[1], value);
      this.loadInfo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'loadInfo' field has been set
     */
    public boolean hasLoadInfo() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'loadInfo' field
     */
    public org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder clearLoadInfo() {
      loadInfo = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'timeStarted' field
     */
    public java.lang.Long getTimeStarted() {
      return timeStarted;
    }

    /**
     * Sets the value of the 'timeStarted' field
     */
    public org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder setTimeStarted(long value) {
      validate(fields()[2], value);
      this.timeStarted = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'timeStarted' field has been set
     */
    public boolean hasTimeStarted() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'timeStarted' field
     */
    public org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder clearTimeStarted() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'transports' field
     */
    public java.util.List<org.kaaproject.kaa.server.common.zk.gen.TransportMetaData> getTransports() {
      return transports;
    }

    /**
     * Sets the value of the 'transports' field
     */
    public org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder setTransports(java.util.List<org.kaaproject.kaa.server.common.zk.gen.TransportMetaData> value) {
      validate(fields()[3], value);
      this.transports = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'transports' field has been set
     */
    public boolean hasTransports() {
      return fieldSetFlags()[3];
    }

    /**
     * Clears the value of the 'transports' field
     */
    public org.kaaproject.kaa.server.common.zk.gen.OperationsNodeInfo.Builder clearTransports() {
      transports = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public OperationsNodeInfo build() {
      try {
        OperationsNodeInfo record = new OperationsNodeInfo();
        record.connectionInfo = fieldSetFlags()[0] ? this.connectionInfo : (org.kaaproject.kaa.server.common.zk.gen.ConnectionInfo) defaultValue(fields()[0]);
        record.loadInfo = fieldSetFlags()[1] ? this.loadInfo : (org.kaaproject.kaa.server.common.zk.gen.LoadInfo) defaultValue(fields()[1]);
        record.timeStarted = fieldSetFlags()[2] ? this.timeStarted : (java.lang.Long) defaultValue(fields()[2]);
        record.transports = fieldSetFlags()[3] ? this.transports : (java.util.List<org.kaaproject.kaa.server.common.zk.gen.TransportMetaData>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
