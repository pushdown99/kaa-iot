/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.kaaproject.kaa.server.common.thrift.gen.operations;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-19")
public class OperationsThriftService {

  public interface Iface {

    /**
     * Application Sequence Numbers
     */
    public void onNotification(Notification notification) throws org.apache.thrift.TException;

    /**
     * Set redirection rule for Operations server
     */
    public void setRedirectionRule(RedirectionRule redirectionRule) throws org.apache.thrift.TException;

    /**
     * Interface to send unified event messages
     */
    public void sendMessages(List<Message> messages) throws org.apache.thrift.TException;

    /**
     * Report user configuration update from control to operation servers
     */
    public void sendUserConfigurationUpdates(List<UserConfigurationUpdate> updates) throws org.apache.thrift.TException;

    /**
     * Interface to send unified entity route messages
     */
    public void onEntityRouteMessages(List<ThriftEntityRouteMessage> messages) throws org.apache.thrift.TException;

    /**
     * Interface to send unicast notification message
     */
    public void onUnicastNotification(ThriftUnicastNotificationMessage message) throws org.apache.thrift.TException;

    /**
     * Interface to send server profile update message
     */
    public void onServerProfileUpdate(ThriftServerProfileUpdateMessage message) throws org.apache.thrift.TException;

    /**
     * Interface to send server profile update message
     */
    public void onEndpointDeregistration(ThriftEndpointDeregistrationMessage message) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void onNotification(Notification notification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setRedirectionRule(RedirectionRule redirectionRule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendMessages(List<Message> messages, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendUserConfigurationUpdates(List<UserConfigurationUpdate> updates, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void onEntityRouteMessages(List<ThriftEntityRouteMessage> messages, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void onUnicastNotification(ThriftUnicastNotificationMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void onServerProfileUpdate(ThriftServerProfileUpdateMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void onEndpointDeregistration(ThriftEndpointDeregistrationMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public Client(org.apache.thrift.protocol.TProtocol prot) {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void onNotification(Notification notification) throws org.apache.thrift.TException {
      send_onNotification(notification);
      recv_onNotification();
    }

    public void send_onNotification(Notification notification) throws org.apache.thrift.TException {
      onNotification_args args = new onNotification_args();
      args.setNotification(notification);
      sendBase("onNotification", args);
    }

    public void recv_onNotification() throws org.apache.thrift.TException {
      onNotification_result result = new onNotification_result();
      receiveBase(result, "onNotification");
      return;
    }

    public void setRedirectionRule(RedirectionRule redirectionRule) throws org.apache.thrift.TException {
      send_setRedirectionRule(redirectionRule);
      recv_setRedirectionRule();
    }

    public void send_setRedirectionRule(RedirectionRule redirectionRule) throws org.apache.thrift.TException {
      setRedirectionRule_args args = new setRedirectionRule_args();
      args.setRedirectionRule(redirectionRule);
      sendBase("setRedirectionRule", args);
    }

    public void recv_setRedirectionRule() throws org.apache.thrift.TException {
      setRedirectionRule_result result = new setRedirectionRule_result();
      receiveBase(result, "setRedirectionRule");
      return;
    }

    public void sendMessages(List<Message> messages) throws org.apache.thrift.TException {
      send_sendMessages(messages);
      recv_sendMessages();
    }

    public void send_sendMessages(List<Message> messages) throws org.apache.thrift.TException {
      sendMessages_args args = new sendMessages_args();
      args.setMessages(messages);
      sendBase("sendMessages", args);
    }

    public void recv_sendMessages() throws org.apache.thrift.TException {
      sendMessages_result result = new sendMessages_result();
      receiveBase(result, "sendMessages");
      return;
    }

    public void sendUserConfigurationUpdates(List<UserConfigurationUpdate> updates) throws org.apache.thrift.TException {
      send_sendUserConfigurationUpdates(updates);
      recv_sendUserConfigurationUpdates();
    }

    public void send_sendUserConfigurationUpdates(List<UserConfigurationUpdate> updates) throws org.apache.thrift.TException {
      sendUserConfigurationUpdates_args args = new sendUserConfigurationUpdates_args();
      args.setUpdates(updates);
      sendBase("sendUserConfigurationUpdates", args);
    }

    public void recv_sendUserConfigurationUpdates() throws org.apache.thrift.TException {
      sendUserConfigurationUpdates_result result = new sendUserConfigurationUpdates_result();
      receiveBase(result, "sendUserConfigurationUpdates");
      return;
    }

    public void onEntityRouteMessages(List<ThriftEntityRouteMessage> messages) throws org.apache.thrift.TException {
      send_onEntityRouteMessages(messages);
      recv_onEntityRouteMessages();
    }

    public void send_onEntityRouteMessages(List<ThriftEntityRouteMessage> messages) throws org.apache.thrift.TException {
      onEntityRouteMessages_args args = new onEntityRouteMessages_args();
      args.setMessages(messages);
      sendBase("onEntityRouteMessages", args);
    }

    public void recv_onEntityRouteMessages() throws org.apache.thrift.TException {
      onEntityRouteMessages_result result = new onEntityRouteMessages_result();
      receiveBase(result, "onEntityRouteMessages");
      return;
    }

    public void onUnicastNotification(ThriftUnicastNotificationMessage message) throws org.apache.thrift.TException {
      send_onUnicastNotification(message);
      recv_onUnicastNotification();
    }

    public void send_onUnicastNotification(ThriftUnicastNotificationMessage message) throws org.apache.thrift.TException {
      onUnicastNotification_args args = new onUnicastNotification_args();
      args.setMessage(message);
      sendBase("onUnicastNotification", args);
    }

    public void recv_onUnicastNotification() throws org.apache.thrift.TException {
      onUnicastNotification_result result = new onUnicastNotification_result();
      receiveBase(result, "onUnicastNotification");
      return;
    }

    public void onServerProfileUpdate(ThriftServerProfileUpdateMessage message) throws org.apache.thrift.TException {
      send_onServerProfileUpdate(message);
      recv_onServerProfileUpdate();
    }

    public void send_onServerProfileUpdate(ThriftServerProfileUpdateMessage message) throws org.apache.thrift.TException {
      onServerProfileUpdate_args args = new onServerProfileUpdate_args();
      args.setMessage(message);
      sendBase("onServerProfileUpdate", args);
    }

    public void recv_onServerProfileUpdate() throws org.apache.thrift.TException {
      onServerProfileUpdate_result result = new onServerProfileUpdate_result();
      receiveBase(result, "onServerProfileUpdate");
      return;
    }

    public void onEndpointDeregistration(ThriftEndpointDeregistrationMessage message) throws org.apache.thrift.TException {
      send_onEndpointDeregistration(message);
      recv_onEndpointDeregistration();
    }

    public void send_onEndpointDeregistration(ThriftEndpointDeregistrationMessage message) throws org.apache.thrift.TException {
      onEndpointDeregistration_args args = new onEndpointDeregistration_args();
      args.setMessage(message);
      sendBase("onEndpointDeregistration", args);
    }

    public void recv_onEndpointDeregistration() throws org.apache.thrift.TException {
      onEndpointDeregistration_result result = new onEndpointDeregistration_result();
      receiveBase(result, "onEndpointDeregistration");
      return;
    }

    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {
      }

      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }

      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

  }

  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void onNotification(Notification notification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onNotification_call method_call = new onNotification_call(notification, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void setRedirectionRule(RedirectionRule redirectionRule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setRedirectionRule_call method_call = new setRedirectionRule_call(redirectionRule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void sendMessages(List<Message> messages, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendMessages_call method_call = new sendMessages_call(messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void sendUserConfigurationUpdates(List<UserConfigurationUpdate> updates, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendUserConfigurationUpdates_call method_call = new sendUserConfigurationUpdates_call(updates, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void onEntityRouteMessages(List<ThriftEntityRouteMessage> messages, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onEntityRouteMessages_call method_call = new onEntityRouteMessages_call(messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void onUnicastNotification(ThriftUnicastNotificationMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onUnicastNotification_call method_call = new onUnicastNotification_call(message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void onServerProfileUpdate(ThriftServerProfileUpdateMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onServerProfileUpdate_call method_call = new onServerProfileUpdate_call(message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public void onEndpointDeregistration(ThriftEndpointDeregistrationMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onEndpointDeregistration_call method_call = new onEndpointDeregistration_call(message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }

      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public static class onNotification_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Notification notification;

      public onNotification_call(Notification notification, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.notification = notification;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onNotification", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onNotification_args args = new onNotification_args();
        args.setNotification(notification);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_onNotification();
      }
    }

    public static class setRedirectionRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RedirectionRule redirectionRule;

      public setRedirectionRule_call(RedirectionRule redirectionRule, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.redirectionRule = redirectionRule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRedirectionRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setRedirectionRule_args args = new setRedirectionRule_args();
        args.setRedirectionRule(redirectionRule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setRedirectionRule();
      }
    }

    public static class sendMessages_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Message> messages;

      public sendMessages_call(List<Message> messages, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messages = messages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMessages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendMessages_args args = new sendMessages_args();
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendMessages();
      }
    }

    public static class sendUserConfigurationUpdates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<UserConfigurationUpdate> updates;

      public sendUserConfigurationUpdates_call(List<UserConfigurationUpdate> updates, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.updates = updates;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendUserConfigurationUpdates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendUserConfigurationUpdates_args args = new sendUserConfigurationUpdates_args();
        args.setUpdates(updates);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendUserConfigurationUpdates();
      }
    }

    public static class onEntityRouteMessages_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ThriftEntityRouteMessage> messages;

      public onEntityRouteMessages_call(List<ThriftEntityRouteMessage> messages, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messages = messages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onEntityRouteMessages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onEntityRouteMessages_args args = new onEntityRouteMessages_args();
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_onEntityRouteMessages();
      }
    }

    public static class onUnicastNotification_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftUnicastNotificationMessage message;

      public onUnicastNotification_call(ThriftUnicastNotificationMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onUnicastNotification", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onUnicastNotification_args args = new onUnicastNotification_args();
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_onUnicastNotification();
      }
    }

    public static class onServerProfileUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftServerProfileUpdateMessage message;

      public onServerProfileUpdate_call(ThriftServerProfileUpdateMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onServerProfileUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onServerProfileUpdate_args args = new onServerProfileUpdate_args();
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_onServerProfileUpdate();
      }
    }

    public static class onEndpointDeregistration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftEndpointDeregistrationMessage message;

      public onEndpointDeregistration_call(ThriftEndpointDeregistrationMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onEndpointDeregistration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onEndpointDeregistration_args args = new onEndpointDeregistration_args();
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_onEndpointDeregistration();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("onNotification", new onNotification());
      processMap.put("setRedirectionRule", new setRedirectionRule());
      processMap.put("sendMessages", new sendMessages());
      processMap.put("sendUserConfigurationUpdates", new sendUserConfigurationUpdates());
      processMap.put("onEntityRouteMessages", new onEntityRouteMessages());
      processMap.put("onUnicastNotification", new onUnicastNotification());
      processMap.put("onServerProfileUpdate", new onServerProfileUpdate());
      processMap.put("onEndpointDeregistration", new onEndpointDeregistration());
      return processMap;
    }

    public static class onNotification<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onNotification_args> {
      public onNotification() {
        super("onNotification");
      }

      public onNotification_args getEmptyArgsInstance() {
        return new onNotification_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public onNotification_result getResult(I iface, onNotification_args args) throws org.apache.thrift.TException {
        onNotification_result result = new onNotification_result();
        iface.onNotification(args.notification);
        return result;
      }
    }

    public static class setRedirectionRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setRedirectionRule_args> {
      public setRedirectionRule() {
        super("setRedirectionRule");
      }

      public setRedirectionRule_args getEmptyArgsInstance() {
        return new setRedirectionRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setRedirectionRule_result getResult(I iface, setRedirectionRule_args args) throws org.apache.thrift.TException {
        setRedirectionRule_result result = new setRedirectionRule_result();
        iface.setRedirectionRule(args.redirectionRule);
        return result;
      }
    }

    public static class sendMessages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMessages_args> {
      public sendMessages() {
        super("sendMessages");
      }

      public sendMessages_args getEmptyArgsInstance() {
        return new sendMessages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendMessages_result getResult(I iface, sendMessages_args args) throws org.apache.thrift.TException {
        sendMessages_result result = new sendMessages_result();
        iface.sendMessages(args.messages);
        return result;
      }
    }

    public static class sendUserConfigurationUpdates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendUserConfigurationUpdates_args> {
      public sendUserConfigurationUpdates() {
        super("sendUserConfigurationUpdates");
      }

      public sendUserConfigurationUpdates_args getEmptyArgsInstance() {
        return new sendUserConfigurationUpdates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendUserConfigurationUpdates_result getResult(I iface, sendUserConfigurationUpdates_args args) throws org.apache.thrift.TException {
        sendUserConfigurationUpdates_result result = new sendUserConfigurationUpdates_result();
        iface.sendUserConfigurationUpdates(args.updates);
        return result;
      }
    }

    public static class onEntityRouteMessages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onEntityRouteMessages_args> {
      public onEntityRouteMessages() {
        super("onEntityRouteMessages");
      }

      public onEntityRouteMessages_args getEmptyArgsInstance() {
        return new onEntityRouteMessages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public onEntityRouteMessages_result getResult(I iface, onEntityRouteMessages_args args) throws org.apache.thrift.TException {
        onEntityRouteMessages_result result = new onEntityRouteMessages_result();
        iface.onEntityRouteMessages(args.messages);
        return result;
      }
    }

    public static class onUnicastNotification<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onUnicastNotification_args> {
      public onUnicastNotification() {
        super("onUnicastNotification");
      }

      public onUnicastNotification_args getEmptyArgsInstance() {
        return new onUnicastNotification_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public onUnicastNotification_result getResult(I iface, onUnicastNotification_args args) throws org.apache.thrift.TException {
        onUnicastNotification_result result = new onUnicastNotification_result();
        iface.onUnicastNotification(args.message);
        return result;
      }
    }

    public static class onServerProfileUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onServerProfileUpdate_args> {
      public onServerProfileUpdate() {
        super("onServerProfileUpdate");
      }

      public onServerProfileUpdate_args getEmptyArgsInstance() {
        return new onServerProfileUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public onServerProfileUpdate_result getResult(I iface, onServerProfileUpdate_args args) throws org.apache.thrift.TException {
        onServerProfileUpdate_result result = new onServerProfileUpdate_result();
        iface.onServerProfileUpdate(args.message);
        return result;
      }
    }

    public static class onEndpointDeregistration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onEndpointDeregistration_args> {
      public onEndpointDeregistration() {
        super("onEndpointDeregistration");
      }

      public onEndpointDeregistration_args getEmptyArgsInstance() {
        return new onEndpointDeregistration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public onEndpointDeregistration_result getResult(I iface, onEndpointDeregistration_args args) throws org.apache.thrift.TException {
        onEndpointDeregistration_result result = new onEndpointDeregistration_result();
        iface.onEndpointDeregistration(args.message);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("onNotification", new onNotification());
      processMap.put("setRedirectionRule", new setRedirectionRule());
      processMap.put("sendMessages", new sendMessages());
      processMap.put("sendUserConfigurationUpdates", new sendUserConfigurationUpdates());
      processMap.put("onEntityRouteMessages", new onEntityRouteMessages());
      processMap.put("onUnicastNotification", new onUnicastNotification());
      processMap.put("onServerProfileUpdate", new onServerProfileUpdate());
      processMap.put("onEndpointDeregistration", new onEndpointDeregistration());
      return processMap;
    }

    public static class onNotification<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onNotification_args, Void> {
      public onNotification() {
        super("onNotification");
      }

      public onNotification_args getEmptyArgsInstance() {
        return new onNotification_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            onNotification_result result = new onNotification_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            onNotification_result result = new onNotification_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, onNotification_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.onNotification(args.notification, resultHandler);
      }
    }

    public static class setRedirectionRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setRedirectionRule_args, Void> {
      public setRedirectionRule() {
        super("setRedirectionRule");
      }

      public setRedirectionRule_args getEmptyArgsInstance() {
        return new setRedirectionRule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            setRedirectionRule_result result = new setRedirectionRule_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setRedirectionRule_result result = new setRedirectionRule_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setRedirectionRule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setRedirectionRule(args.redirectionRule, resultHandler);
      }
    }

    public static class sendMessages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMessages_args, Void> {
      public sendMessages() {
        super("sendMessages");
      }

      public sendMessages_args getEmptyArgsInstance() {
        return new sendMessages_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            sendMessages_result result = new sendMessages_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendMessages_result result = new sendMessages_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendMessages_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendMessages(args.messages, resultHandler);
      }
    }

    public static class sendUserConfigurationUpdates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendUserConfigurationUpdates_args, Void> {
      public sendUserConfigurationUpdates() {
        super("sendUserConfigurationUpdates");
      }

      public sendUserConfigurationUpdates_args getEmptyArgsInstance() {
        return new sendUserConfigurationUpdates_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            sendUserConfigurationUpdates_result result = new sendUserConfigurationUpdates_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendUserConfigurationUpdates_result result = new sendUserConfigurationUpdates_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendUserConfigurationUpdates_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendUserConfigurationUpdates(args.updates, resultHandler);
      }
    }

    public static class onEntityRouteMessages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onEntityRouteMessages_args, Void> {
      public onEntityRouteMessages() {
        super("onEntityRouteMessages");
      }

      public onEntityRouteMessages_args getEmptyArgsInstance() {
        return new onEntityRouteMessages_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            onEntityRouteMessages_result result = new onEntityRouteMessages_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            onEntityRouteMessages_result result = new onEntityRouteMessages_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, onEntityRouteMessages_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.onEntityRouteMessages(args.messages, resultHandler);
      }
    }

    public static class onUnicastNotification<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onUnicastNotification_args, Void> {
      public onUnicastNotification() {
        super("onUnicastNotification");
      }

      public onUnicastNotification_args getEmptyArgsInstance() {
        return new onUnicastNotification_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            onUnicastNotification_result result = new onUnicastNotification_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            onUnicastNotification_result result = new onUnicastNotification_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, onUnicastNotification_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.onUnicastNotification(args.message, resultHandler);
      }
    }

    public static class onServerProfileUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onServerProfileUpdate_args, Void> {
      public onServerProfileUpdate() {
        super("onServerProfileUpdate");
      }

      public onServerProfileUpdate_args getEmptyArgsInstance() {
        return new onServerProfileUpdate_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            onServerProfileUpdate_result result = new onServerProfileUpdate_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            onServerProfileUpdate_result result = new onServerProfileUpdate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, onServerProfileUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.onServerProfileUpdate(args.message, resultHandler);
      }
    }

    public static class onEndpointDeregistration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onEndpointDeregistration_args, Void> {
      public onEndpointDeregistration() {
        super("onEndpointDeregistration");
      }

      public onEndpointDeregistration_args getEmptyArgsInstance() {
        return new onEndpointDeregistration_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            onEndpointDeregistration_result result = new onEndpointDeregistration_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            onEndpointDeregistration_result result = new onEndpointDeregistration_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, onEndpointDeregistration_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.onEndpointDeregistration(args.message, resultHandler);
      }
    }

  }

  public static class onNotification_args implements org.apache.thrift.TBase<onNotification_args, onNotification_args._Fields>, java.io.Serializable, Cloneable, Comparable<onNotification_args> {
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onNotification_args");
    private static final org.apache.thrift.protocol.TField NOTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("notification", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new onNotification_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onNotification_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("notification", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Notification.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onNotification_args.class, metaDataMap);
    }

    public Notification notification; // required

    public onNotification_args() {
    }

    public onNotification_args(
        Notification notification) {
      this();
      this.notification = notification;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onNotification_args(onNotification_args other) {
      if (other.isSetNotification()) {
        this.notification = new Notification(other.notification);
      }
    }

    public onNotification_args deepCopy() {
      return new onNotification_args(this);
    }

    @Override
    public void clear() {
      this.notification = null;
    }

    public Notification getNotification() {
      return this.notification;
    }

    public onNotification_args setNotification(Notification notification) {
      this.notification = notification;
      return this;
    }

    public void unsetNotification() {
      this.notification = null;
    }

    /**
     * Returns true if field notification is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNotification() {
      return this.notification != null;
    }

    public void setNotificationIsSet(boolean value) {
      if (!value) {
        this.notification = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case NOTIFICATION:
          if (value == null) {
            unsetNotification();
          } else {
            setNotification((Notification) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case NOTIFICATION:
          return getNotification();

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case NOTIFICATION:
          return isSetNotification();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onNotification_args)
        return this.equals((onNotification_args) that);
      return false;
    }

    public boolean equals(onNotification_args that) {
      if (that == null)
        return false;

      boolean this_present_notification = true && this.isSetNotification();
      boolean that_present_notification = true && that.isSetNotification();
      if (this_present_notification || that_present_notification) {
        if (!(this_present_notification && that_present_notification))
          return false;
        if (!this.notification.equals(that.notification))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_notification = true && (isSetNotification());
      list.add(present_notification);
      if (present_notification)
        list.add(notification);

      return list.hashCode();
    }

    @Override
    public int compareTo(onNotification_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNotification()).compareTo(other.isSetNotification());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotification()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notification, other.notification);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onNotification_args(");
      boolean first = true;

      sb.append("notification:");
      if (this.notification == null) {
        sb.append("null");
      } else {
        sb.append(this.notification);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (notification != null) {
        notification.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOTIFICATION((short) 1, "notification");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // NOTIFICATION
            return NOTIFICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class onNotification_argsStandardSchemeFactory implements SchemeFactory {
      public onNotification_argsStandardScheme getScheme() {
        return new onNotification_argsStandardScheme();
      }
    }

    private static class onNotification_argsStandardScheme extends StandardScheme<onNotification_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onNotification_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // NOTIFICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notification = new Notification();
                struct.notification.read(iprot);
                struct.setNotificationIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onNotification_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.notification != null) {
          oprot.writeFieldBegin(NOTIFICATION_FIELD_DESC);
          struct.notification.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onNotification_argsTupleSchemeFactory implements SchemeFactory {
      public onNotification_argsTupleScheme getScheme() {
        return new onNotification_argsTupleScheme();
      }
    }

    private static class onNotification_argsTupleScheme extends TupleScheme<onNotification_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onNotification_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNotification()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNotification()) {
          struct.notification.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onNotification_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.notification = new Notification();
          struct.notification.read(iprot);
          struct.setNotificationIsSet(true);
        }
      }
    }

  }

  public static class onNotification_result implements org.apache.thrift.TBase<onNotification_result, onNotification_result._Fields>, java.io.Serializable, Cloneable, Comparable<onNotification_result> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onNotification_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new onNotification_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onNotification_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onNotification_result.class, metaDataMap);
    }

    public onNotification_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onNotification_result(onNotification_result other) {
    }

    public onNotification_result deepCopy() {
      return new onNotification_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onNotification_result)
        return this.equals((onNotification_result) that);
      return false;
    }

    public boolean equals(onNotification_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(onNotification_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onNotification_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class onNotification_resultStandardSchemeFactory implements SchemeFactory {
      public onNotification_resultStandardScheme getScheme() {
        return new onNotification_resultStandardScheme();
      }
    }

    private static class onNotification_resultStandardScheme extends StandardScheme<onNotification_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onNotification_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onNotification_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onNotification_resultTupleSchemeFactory implements SchemeFactory {
      public onNotification_resultTupleScheme getScheme() {
        return new onNotification_resultTupleScheme();
      }
    }

    private static class onNotification_resultTupleScheme extends TupleScheme<onNotification_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onNotification_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onNotification_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setRedirectionRule_args implements org.apache.thrift.TBase<setRedirectionRule_args, setRedirectionRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<setRedirectionRule_args> {
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRedirectionRule_args");
    private static final org.apache.thrift.protocol.TField REDIRECTION_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("redirectionRule", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new setRedirectionRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRedirectionRule_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REDIRECTION_RULE, new org.apache.thrift.meta_data.FieldMetaData("redirectionRule", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RedirectionRule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRedirectionRule_args.class, metaDataMap);
    }

    public RedirectionRule redirectionRule; // required

    public setRedirectionRule_args() {
    }

    public setRedirectionRule_args(
        RedirectionRule redirectionRule) {
      this();
      this.redirectionRule = redirectionRule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRedirectionRule_args(setRedirectionRule_args other) {
      if (other.isSetRedirectionRule()) {
        this.redirectionRule = new RedirectionRule(other.redirectionRule);
      }
    }

    public setRedirectionRule_args deepCopy() {
      return new setRedirectionRule_args(this);
    }

    @Override
    public void clear() {
      this.redirectionRule = null;
    }

    public RedirectionRule getRedirectionRule() {
      return this.redirectionRule;
    }

    public setRedirectionRule_args setRedirectionRule(RedirectionRule redirectionRule) {
      this.redirectionRule = redirectionRule;
      return this;
    }

    public void unsetRedirectionRule() {
      this.redirectionRule = null;
    }

    /**
     * Returns true if field redirectionRule is set (has been assigned a value) and false otherwise
     */
    public boolean isSetRedirectionRule() {
      return this.redirectionRule != null;
    }

    public void setRedirectionRuleIsSet(boolean value) {
      if (!value) {
        this.redirectionRule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case REDIRECTION_RULE:
          if (value == null) {
            unsetRedirectionRule();
          } else {
            setRedirectionRule((RedirectionRule) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case REDIRECTION_RULE:
          return getRedirectionRule();

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case REDIRECTION_RULE:
          return isSetRedirectionRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRedirectionRule_args)
        return this.equals((setRedirectionRule_args) that);
      return false;
    }

    public boolean equals(setRedirectionRule_args that) {
      if (that == null)
        return false;

      boolean this_present_redirectionRule = true && this.isSetRedirectionRule();
      boolean that_present_redirectionRule = true && that.isSetRedirectionRule();
      if (this_present_redirectionRule || that_present_redirectionRule) {
        if (!(this_present_redirectionRule && that_present_redirectionRule))
          return false;
        if (!this.redirectionRule.equals(that.redirectionRule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_redirectionRule = true && (isSetRedirectionRule());
      list.add(present_redirectionRule);
      if (present_redirectionRule)
        list.add(redirectionRule);

      return list.hashCode();
    }

    @Override
    public int compareTo(setRedirectionRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRedirectionRule()).compareTo(other.isSetRedirectionRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRedirectionRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redirectionRule, other.redirectionRule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRedirectionRule_args(");
      boolean first = true;

      sb.append("redirectionRule:");
      if (this.redirectionRule == null) {
        sb.append("null");
      } else {
        sb.append(this.redirectionRule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (redirectionRule != null) {
        redirectionRule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REDIRECTION_RULE((short) 1, "redirectionRule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // REDIRECTION_RULE
            return REDIRECTION_RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class setRedirectionRule_argsStandardSchemeFactory implements SchemeFactory {
      public setRedirectionRule_argsStandardScheme getScheme() {
        return new setRedirectionRule_argsStandardScheme();
      }
    }

    private static class setRedirectionRule_argsStandardScheme extends StandardScheme<setRedirectionRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRedirectionRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // REDIRECTION_RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.redirectionRule = new RedirectionRule();
                struct.redirectionRule.read(iprot);
                struct.setRedirectionRuleIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRedirectionRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.redirectionRule != null) {
          oprot.writeFieldBegin(REDIRECTION_RULE_FIELD_DESC);
          struct.redirectionRule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRedirectionRule_argsTupleSchemeFactory implements SchemeFactory {
      public setRedirectionRule_argsTupleScheme getScheme() {
        return new setRedirectionRule_argsTupleScheme();
      }
    }

    private static class setRedirectionRule_argsTupleScheme extends TupleScheme<setRedirectionRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRedirectionRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRedirectionRule()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRedirectionRule()) {
          struct.redirectionRule.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRedirectionRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.redirectionRule = new RedirectionRule();
          struct.redirectionRule.read(iprot);
          struct.setRedirectionRuleIsSet(true);
        }
      }
    }

  }

  public static class setRedirectionRule_result implements org.apache.thrift.TBase<setRedirectionRule_result, setRedirectionRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<setRedirectionRule_result> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRedirectionRule_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new setRedirectionRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRedirectionRule_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRedirectionRule_result.class, metaDataMap);
    }

    public setRedirectionRule_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRedirectionRule_result(setRedirectionRule_result other) {
    }

    public setRedirectionRule_result deepCopy() {
      return new setRedirectionRule_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRedirectionRule_result)
        return this.equals((setRedirectionRule_result) that);
      return false;
    }

    public boolean equals(setRedirectionRule_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(setRedirectionRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRedirectionRule_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class setRedirectionRule_resultStandardSchemeFactory implements SchemeFactory {
      public setRedirectionRule_resultStandardScheme getScheme() {
        return new setRedirectionRule_resultStandardScheme();
      }
    }

    private static class setRedirectionRule_resultStandardScheme extends StandardScheme<setRedirectionRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRedirectionRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRedirectionRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRedirectionRule_resultTupleSchemeFactory implements SchemeFactory {
      public setRedirectionRule_resultTupleScheme getScheme() {
        return new setRedirectionRule_resultTupleScheme();
      }
    }

    private static class setRedirectionRule_resultTupleScheme extends TupleScheme<setRedirectionRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRedirectionRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRedirectionRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sendMessages_args implements org.apache.thrift.TBase<sendMessages_args, sendMessages_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMessages_args> {
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMessages_args");
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short) 1);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new sendMessages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMessages_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessages_args.class, metaDataMap);
    }

    public List<Message> messages; // required

    public sendMessages_args() {
    }

    public sendMessages_args(
        List<Message> messages) {
      this();
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessages_args(sendMessages_args other) {
      if (other.isSetMessages()) {
        List<Message> __this__messages = new ArrayList<Message>(other.messages.size());
        for (Message other_element : other.messages) {
          __this__messages.add(new Message(other_element));
        }
        this.messages = __this__messages;
      }
    }

    public sendMessages_args deepCopy() {
      return new sendMessages_args(this);
    }

    @Override
    public void clear() {
      this.messages = null;
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    public java.util.Iterator<Message> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(Message elem) {
      if (this.messages == null) {
        this.messages = new ArrayList<Message>();
      }
      this.messages.add(elem);
    }

    public List<Message> getMessages() {
      return this.messages;
    }

    public sendMessages_args setMessages(List<Message> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /**
     * Returns true if field messages is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case MESSAGES:
          if (value == null) {
            unsetMessages();
          } else {
            setMessages((List<Message>) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case MESSAGES:
          return getMessages();

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case MESSAGES:
          return isSetMessages();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessages_args)
        return this.equals((sendMessages_args) that);
      return false;
    }

    public boolean equals(sendMessages_args that) {
      if (that == null)
        return false;

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_messages = true && (isSetMessages());
      list.add(present_messages);
      if (present_messages)
        list.add(messages);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendMessages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMessages_args(");
      boolean first = true;

      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGES((short) 1, "messages");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class sendMessages_argsStandardSchemeFactory implements SchemeFactory {
      public sendMessages_argsStandardScheme getScheme() {
        return new sendMessages_argsStandardScheme();
      }
    }

    private static class sendMessages_argsStandardScheme extends StandardScheme<sendMessages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMessages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.messages = new ArrayList<Message>(_list16.size);
                  Message _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18) {
                    _elem17 = new Message();
                    _elem17.read(iprot);
                    struct.messages.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMessages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (Message _iter19 : struct.messages) {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMessages_argsTupleSchemeFactory implements SchemeFactory {
      public sendMessages_argsTupleScheme getScheme() {
        return new sendMessages_argsTupleScheme();
      }
    }

    private static class sendMessages_argsTupleScheme extends TupleScheme<sendMessages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessages()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessages()) {
          {
            oprot.writeI32(struct.messages.size());
            for (Message _iter20 : struct.messages) {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.messages = new ArrayList<Message>(_list21.size);
            Message _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23) {
              _elem22 = new Message();
              _elem22.read(iprot);
              struct.messages.add(_elem22);
            }
          }
          struct.setMessagesIsSet(true);
        }
      }
    }

  }

  public static class sendMessages_result implements org.apache.thrift.TBase<sendMessages_result, sendMessages_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendMessages_result> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMessages_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new sendMessages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMessages_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessages_result.class, metaDataMap);
    }

    public sendMessages_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessages_result(sendMessages_result other) {
    }

    public sendMessages_result deepCopy() {
      return new sendMessages_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessages_result)
        return this.equals((sendMessages_result) that);
      return false;
    }

    public boolean equals(sendMessages_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(sendMessages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMessages_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class sendMessages_resultStandardSchemeFactory implements SchemeFactory {
      public sendMessages_resultStandardScheme getScheme() {
        return new sendMessages_resultStandardScheme();
      }
    }

    private static class sendMessages_resultStandardScheme extends StandardScheme<sendMessages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMessages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMessages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMessages_resultTupleSchemeFactory implements SchemeFactory {
      public sendMessages_resultTupleScheme getScheme() {
        return new sendMessages_resultTupleScheme();
      }
    }

    private static class sendMessages_resultTupleScheme extends TupleScheme<sendMessages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sendUserConfigurationUpdates_args implements org.apache.thrift.TBase<sendUserConfigurationUpdates_args, sendUserConfigurationUpdates_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendUserConfigurationUpdates_args> {
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendUserConfigurationUpdates_args");
    private static final org.apache.thrift.protocol.TField UPDATES_FIELD_DESC = new org.apache.thrift.protocol.TField("updates", org.apache.thrift.protocol.TType.LIST, (short) 1);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new sendUserConfigurationUpdates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendUserConfigurationUpdates_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPDATES, new org.apache.thrift.meta_data.FieldMetaData("updates", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserConfigurationUpdate.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendUserConfigurationUpdates_args.class, metaDataMap);
    }

    public List<UserConfigurationUpdate> updates; // required

    public sendUserConfigurationUpdates_args() {
    }

    public sendUserConfigurationUpdates_args(
        List<UserConfigurationUpdate> updates) {
      this();
      this.updates = updates;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendUserConfigurationUpdates_args(sendUserConfigurationUpdates_args other) {
      if (other.isSetUpdates()) {
        List<UserConfigurationUpdate> __this__updates = new ArrayList<UserConfigurationUpdate>(other.updates.size());
        for (UserConfigurationUpdate other_element : other.updates) {
          __this__updates.add(new UserConfigurationUpdate(other_element));
        }
        this.updates = __this__updates;
      }
    }

    public sendUserConfigurationUpdates_args deepCopy() {
      return new sendUserConfigurationUpdates_args(this);
    }

    @Override
    public void clear() {
      this.updates = null;
    }

    public int getUpdatesSize() {
      return (this.updates == null) ? 0 : this.updates.size();
    }

    public java.util.Iterator<UserConfigurationUpdate> getUpdatesIterator() {
      return (this.updates == null) ? null : this.updates.iterator();
    }

    public void addToUpdates(UserConfigurationUpdate elem) {
      if (this.updates == null) {
        this.updates = new ArrayList<UserConfigurationUpdate>();
      }
      this.updates.add(elem);
    }

    public List<UserConfigurationUpdate> getUpdates() {
      return this.updates;
    }

    public sendUserConfigurationUpdates_args setUpdates(List<UserConfigurationUpdate> updates) {
      this.updates = updates;
      return this;
    }

    public void unsetUpdates() {
      this.updates = null;
    }

    /**
     * Returns true if field updates is set (has been assigned a value) and false otherwise
     */
    public boolean isSetUpdates() {
      return this.updates != null;
    }

    public void setUpdatesIsSet(boolean value) {
      if (!value) {
        this.updates = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case UPDATES:
          if (value == null) {
            unsetUpdates();
          } else {
            setUpdates((List<UserConfigurationUpdate>) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case UPDATES:
          return getUpdates();

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case UPDATES:
          return isSetUpdates();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendUserConfigurationUpdates_args)
        return this.equals((sendUserConfigurationUpdates_args) that);
      return false;
    }

    public boolean equals(sendUserConfigurationUpdates_args that) {
      if (that == null)
        return false;

      boolean this_present_updates = true && this.isSetUpdates();
      boolean that_present_updates = true && that.isSetUpdates();
      if (this_present_updates || that_present_updates) {
        if (!(this_present_updates && that_present_updates))
          return false;
        if (!this.updates.equals(that.updates))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_updates = true && (isSetUpdates());
      list.add(present_updates);
      if (present_updates)
        list.add(updates);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendUserConfigurationUpdates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUpdates()).compareTo(other.isSetUpdates());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdates()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updates, other.updates);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendUserConfigurationUpdates_args(");
      boolean first = true;

      sb.append("updates:");
      if (this.updates == null) {
        sb.append("null");
      } else {
        sb.append(this.updates);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPDATES((short) 1, "updates");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // UPDATES
            return UPDATES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class sendUserConfigurationUpdates_argsStandardSchemeFactory implements SchemeFactory {
      public sendUserConfigurationUpdates_argsStandardScheme getScheme() {
        return new sendUserConfigurationUpdates_argsStandardScheme();
      }
    }

    private static class sendUserConfigurationUpdates_argsStandardScheme extends StandardScheme<sendUserConfigurationUpdates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendUserConfigurationUpdates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // UPDATES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.updates = new ArrayList<UserConfigurationUpdate>(_list24.size);
                  UserConfigurationUpdate _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26) {
                    _elem25 = new UserConfigurationUpdate();
                    _elem25.read(iprot);
                    struct.updates.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setUpdatesIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendUserConfigurationUpdates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.updates != null) {
          oprot.writeFieldBegin(UPDATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.updates.size()));
            for (UserConfigurationUpdate _iter27 : struct.updates) {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendUserConfigurationUpdates_argsTupleSchemeFactory implements SchemeFactory {
      public sendUserConfigurationUpdates_argsTupleScheme getScheme() {
        return new sendUserConfigurationUpdates_argsTupleScheme();
      }
    }

    private static class sendUserConfigurationUpdates_argsTupleScheme extends TupleScheme<sendUserConfigurationUpdates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendUserConfigurationUpdates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUpdates()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUpdates()) {
          {
            oprot.writeI32(struct.updates.size());
            for (UserConfigurationUpdate _iter28 : struct.updates) {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendUserConfigurationUpdates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.updates = new ArrayList<UserConfigurationUpdate>(_list29.size);
            UserConfigurationUpdate _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31) {
              _elem30 = new UserConfigurationUpdate();
              _elem30.read(iprot);
              struct.updates.add(_elem30);
            }
          }
          struct.setUpdatesIsSet(true);
        }
      }
    }

  }

  public static class sendUserConfigurationUpdates_result implements org.apache.thrift.TBase<sendUserConfigurationUpdates_result, sendUserConfigurationUpdates_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendUserConfigurationUpdates_result> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendUserConfigurationUpdates_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new sendUserConfigurationUpdates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendUserConfigurationUpdates_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendUserConfigurationUpdates_result.class, metaDataMap);
    }

    public sendUserConfigurationUpdates_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendUserConfigurationUpdates_result(sendUserConfigurationUpdates_result other) {
    }

    public sendUserConfigurationUpdates_result deepCopy() {
      return new sendUserConfigurationUpdates_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendUserConfigurationUpdates_result)
        return this.equals((sendUserConfigurationUpdates_result) that);
      return false;
    }

    public boolean equals(sendUserConfigurationUpdates_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(sendUserConfigurationUpdates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendUserConfigurationUpdates_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class sendUserConfigurationUpdates_resultStandardSchemeFactory implements SchemeFactory {
      public sendUserConfigurationUpdates_resultStandardScheme getScheme() {
        return new sendUserConfigurationUpdates_resultStandardScheme();
      }
    }

    private static class sendUserConfigurationUpdates_resultStandardScheme extends StandardScheme<sendUserConfigurationUpdates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendUserConfigurationUpdates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendUserConfigurationUpdates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendUserConfigurationUpdates_resultTupleSchemeFactory implements SchemeFactory {
      public sendUserConfigurationUpdates_resultTupleScheme getScheme() {
        return new sendUserConfigurationUpdates_resultTupleScheme();
      }
    }

    private static class sendUserConfigurationUpdates_resultTupleScheme extends TupleScheme<sendUserConfigurationUpdates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendUserConfigurationUpdates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendUserConfigurationUpdates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class onEntityRouteMessages_args implements org.apache.thrift.TBase<onEntityRouteMessages_args, onEntityRouteMessages_args._Fields>, java.io.Serializable, Cloneable, Comparable<onEntityRouteMessages_args> {
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onEntityRouteMessages_args");
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short) 1);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new onEntityRouteMessages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onEntityRouteMessages_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftEntityRouteMessage.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onEntityRouteMessages_args.class, metaDataMap);
    }

    public List<ThriftEntityRouteMessage> messages; // required

    public onEntityRouteMessages_args() {
    }

    public onEntityRouteMessages_args(
        List<ThriftEntityRouteMessage> messages) {
      this();
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onEntityRouteMessages_args(onEntityRouteMessages_args other) {
      if (other.isSetMessages()) {
        List<ThriftEntityRouteMessage> __this__messages = new ArrayList<ThriftEntityRouteMessage>(other.messages.size());
        for (ThriftEntityRouteMessage other_element : other.messages) {
          __this__messages.add(new ThriftEntityRouteMessage(other_element));
        }
        this.messages = __this__messages;
      }
    }

    public onEntityRouteMessages_args deepCopy() {
      return new onEntityRouteMessages_args(this);
    }

    @Override
    public void clear() {
      this.messages = null;
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    public java.util.Iterator<ThriftEntityRouteMessage> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(ThriftEntityRouteMessage elem) {
      if (this.messages == null) {
        this.messages = new ArrayList<ThriftEntityRouteMessage>();
      }
      this.messages.add(elem);
    }

    public List<ThriftEntityRouteMessage> getMessages() {
      return this.messages;
    }

    public onEntityRouteMessages_args setMessages(List<ThriftEntityRouteMessage> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /**
     * Returns true if field messages is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case MESSAGES:
          if (value == null) {
            unsetMessages();
          } else {
            setMessages((List<ThriftEntityRouteMessage>) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case MESSAGES:
          return getMessages();

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case MESSAGES:
          return isSetMessages();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onEntityRouteMessages_args)
        return this.equals((onEntityRouteMessages_args) that);
      return false;
    }

    public boolean equals(onEntityRouteMessages_args that) {
      if (that == null)
        return false;

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_messages = true && (isSetMessages());
      list.add(present_messages);
      if (present_messages)
        list.add(messages);

      return list.hashCode();
    }

    @Override
    public int compareTo(onEntityRouteMessages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onEntityRouteMessages_args(");
      boolean first = true;

      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGES((short) 1, "messages");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class onEntityRouteMessages_argsStandardSchemeFactory implements SchemeFactory {
      public onEntityRouteMessages_argsStandardScheme getScheme() {
        return new onEntityRouteMessages_argsStandardScheme();
      }
    }

    private static class onEntityRouteMessages_argsStandardScheme extends StandardScheme<onEntityRouteMessages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onEntityRouteMessages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.messages = new ArrayList<ThriftEntityRouteMessage>(_list32.size);
                  ThriftEntityRouteMessage _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
                    _elem33 = new ThriftEntityRouteMessage();
                    _elem33.read(iprot);
                    struct.messages.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onEntityRouteMessages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (ThriftEntityRouteMessage _iter35 : struct.messages) {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onEntityRouteMessages_argsTupleSchemeFactory implements SchemeFactory {
      public onEntityRouteMessages_argsTupleScheme getScheme() {
        return new onEntityRouteMessages_argsTupleScheme();
      }
    }

    private static class onEntityRouteMessages_argsTupleScheme extends TupleScheme<onEntityRouteMessages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onEntityRouteMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessages()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessages()) {
          {
            oprot.writeI32(struct.messages.size());
            for (ThriftEntityRouteMessage _iter36 : struct.messages) {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onEntityRouteMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.messages = new ArrayList<ThriftEntityRouteMessage>(_list37.size);
            ThriftEntityRouteMessage _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39) {
              _elem38 = new ThriftEntityRouteMessage();
              _elem38.read(iprot);
              struct.messages.add(_elem38);
            }
          }
          struct.setMessagesIsSet(true);
        }
      }
    }

  }

  public static class onEntityRouteMessages_result implements org.apache.thrift.TBase<onEntityRouteMessages_result, onEntityRouteMessages_result._Fields>, java.io.Serializable, Cloneable, Comparable<onEntityRouteMessages_result> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onEntityRouteMessages_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new onEntityRouteMessages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onEntityRouteMessages_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onEntityRouteMessages_result.class, metaDataMap);
    }

    public onEntityRouteMessages_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onEntityRouteMessages_result(onEntityRouteMessages_result other) {
    }

    public onEntityRouteMessages_result deepCopy() {
      return new onEntityRouteMessages_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onEntityRouteMessages_result)
        return this.equals((onEntityRouteMessages_result) that);
      return false;
    }

    public boolean equals(onEntityRouteMessages_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(onEntityRouteMessages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onEntityRouteMessages_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class onEntityRouteMessages_resultStandardSchemeFactory implements SchemeFactory {
      public onEntityRouteMessages_resultStandardScheme getScheme() {
        return new onEntityRouteMessages_resultStandardScheme();
      }
    }

    private static class onEntityRouteMessages_resultStandardScheme extends StandardScheme<onEntityRouteMessages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onEntityRouteMessages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onEntityRouteMessages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onEntityRouteMessages_resultTupleSchemeFactory implements SchemeFactory {
      public onEntityRouteMessages_resultTupleScheme getScheme() {
        return new onEntityRouteMessages_resultTupleScheme();
      }
    }

    private static class onEntityRouteMessages_resultTupleScheme extends TupleScheme<onEntityRouteMessages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onEntityRouteMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onEntityRouteMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class onUnicastNotification_args implements org.apache.thrift.TBase<onUnicastNotification_args, onUnicastNotification_args._Fields>, java.io.Serializable, Cloneable, Comparable<onUnicastNotification_args> {
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onUnicastNotification_args");
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new onUnicastNotification_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onUnicastNotification_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftUnicastNotificationMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onUnicastNotification_args.class, metaDataMap);
    }

    public ThriftUnicastNotificationMessage message; // required

    public onUnicastNotification_args() {
    }

    public onUnicastNotification_args(
        ThriftUnicastNotificationMessage message) {
      this();
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onUnicastNotification_args(onUnicastNotification_args other) {
      if (other.isSetMessage()) {
        this.message = new ThriftUnicastNotificationMessage(other.message);
      }
    }

    public onUnicastNotification_args deepCopy() {
      return new onUnicastNotification_args(this);
    }

    @Override
    public void clear() {
      this.message = null;
    }

    public ThriftUnicastNotificationMessage getMessage() {
      return this.message;
    }

    public onUnicastNotification_args setMessage(ThriftUnicastNotificationMessage message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /**
     * Returns true if field message is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case MESSAGE:
          if (value == null) {
            unsetMessage();
          } else {
            setMessage((ThriftUnicastNotificationMessage) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case MESSAGE:
          return getMessage();

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case MESSAGE:
          return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onUnicastNotification_args)
        return this.equals((onUnicastNotification_args) that);
      return false;
    }

    public boolean equals(onUnicastNotification_args that) {
      if (that == null)
        return false;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_message = true && (isSetMessage());
      list.add(present_message);
      if (present_message)
        list.add(message);

      return list.hashCode();
    }

    @Override
    public int compareTo(onUnicastNotification_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onUnicastNotification_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (message != null) {
        message.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short) 1, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class onUnicastNotification_argsStandardSchemeFactory implements SchemeFactory {
      public onUnicastNotification_argsStandardScheme getScheme() {
        return new onUnicastNotification_argsStandardScheme();
      }
    }

    private static class onUnicastNotification_argsStandardScheme extends StandardScheme<onUnicastNotification_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onUnicastNotification_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.message = new ThriftUnicastNotificationMessage();
                struct.message.read(iprot);
                struct.setMessageIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onUnicastNotification_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          struct.message.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onUnicastNotification_argsTupleSchemeFactory implements SchemeFactory {
      public onUnicastNotification_argsTupleScheme getScheme() {
        return new onUnicastNotification_argsTupleScheme();
      }
    }

    private static class onUnicastNotification_argsTupleScheme extends TupleScheme<onUnicastNotification_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onUnicastNotification_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessage()) {
          struct.message.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onUnicastNotification_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.message = new ThriftUnicastNotificationMessage();
          struct.message.read(iprot);
          struct.setMessageIsSet(true);
        }
      }
    }

  }

  public static class onUnicastNotification_result implements org.apache.thrift.TBase<onUnicastNotification_result, onUnicastNotification_result._Fields>, java.io.Serializable, Cloneable, Comparable<onUnicastNotification_result> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onUnicastNotification_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new onUnicastNotification_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onUnicastNotification_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onUnicastNotification_result.class, metaDataMap);
    }

    public onUnicastNotification_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onUnicastNotification_result(onUnicastNotification_result other) {
    }

    public onUnicastNotification_result deepCopy() {
      return new onUnicastNotification_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onUnicastNotification_result)
        return this.equals((onUnicastNotification_result) that);
      return false;
    }

    public boolean equals(onUnicastNotification_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(onUnicastNotification_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onUnicastNotification_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class onUnicastNotification_resultStandardSchemeFactory implements SchemeFactory {
      public onUnicastNotification_resultStandardScheme getScheme() {
        return new onUnicastNotification_resultStandardScheme();
      }
    }

    private static class onUnicastNotification_resultStandardScheme extends StandardScheme<onUnicastNotification_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onUnicastNotification_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onUnicastNotification_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onUnicastNotification_resultTupleSchemeFactory implements SchemeFactory {
      public onUnicastNotification_resultTupleScheme getScheme() {
        return new onUnicastNotification_resultTupleScheme();
      }
    }

    private static class onUnicastNotification_resultTupleScheme extends TupleScheme<onUnicastNotification_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onUnicastNotification_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onUnicastNotification_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class onServerProfileUpdate_args implements org.apache.thrift.TBase<onServerProfileUpdate_args, onServerProfileUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<onServerProfileUpdate_args> {
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onServerProfileUpdate_args");
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new onServerProfileUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onServerProfileUpdate_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftServerProfileUpdateMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onServerProfileUpdate_args.class, metaDataMap);
    }

    public ThriftServerProfileUpdateMessage message; // required

    public onServerProfileUpdate_args() {
    }

    public onServerProfileUpdate_args(
        ThriftServerProfileUpdateMessage message) {
      this();
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onServerProfileUpdate_args(onServerProfileUpdate_args other) {
      if (other.isSetMessage()) {
        this.message = new ThriftServerProfileUpdateMessage(other.message);
      }
    }

    public onServerProfileUpdate_args deepCopy() {
      return new onServerProfileUpdate_args(this);
    }

    @Override
    public void clear() {
      this.message = null;
    }

    public ThriftServerProfileUpdateMessage getMessage() {
      return this.message;
    }

    public onServerProfileUpdate_args setMessage(ThriftServerProfileUpdateMessage message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /**
     * Returns true if field message is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case MESSAGE:
          if (value == null) {
            unsetMessage();
          } else {
            setMessage((ThriftServerProfileUpdateMessage) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case MESSAGE:
          return getMessage();

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case MESSAGE:
          return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onServerProfileUpdate_args)
        return this.equals((onServerProfileUpdate_args) that);
      return false;
    }

    public boolean equals(onServerProfileUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_message = true && (isSetMessage());
      list.add(present_message);
      if (present_message)
        list.add(message);

      return list.hashCode();
    }

    @Override
    public int compareTo(onServerProfileUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onServerProfileUpdate_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (message != null) {
        message.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short) 1, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class onServerProfileUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public onServerProfileUpdate_argsStandardScheme getScheme() {
        return new onServerProfileUpdate_argsStandardScheme();
      }
    }

    private static class onServerProfileUpdate_argsStandardScheme extends StandardScheme<onServerProfileUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onServerProfileUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.message = new ThriftServerProfileUpdateMessage();
                struct.message.read(iprot);
                struct.setMessageIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onServerProfileUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          struct.message.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onServerProfileUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public onServerProfileUpdate_argsTupleScheme getScheme() {
        return new onServerProfileUpdate_argsTupleScheme();
      }
    }

    private static class onServerProfileUpdate_argsTupleScheme extends TupleScheme<onServerProfileUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onServerProfileUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessage()) {
          struct.message.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onServerProfileUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.message = new ThriftServerProfileUpdateMessage();
          struct.message.read(iprot);
          struct.setMessageIsSet(true);
        }
      }
    }

  }

  public static class onServerProfileUpdate_result implements org.apache.thrift.TBase<onServerProfileUpdate_result, onServerProfileUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<onServerProfileUpdate_result> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onServerProfileUpdate_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new onServerProfileUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onServerProfileUpdate_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onServerProfileUpdate_result.class, metaDataMap);
    }

    public onServerProfileUpdate_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onServerProfileUpdate_result(onServerProfileUpdate_result other) {
    }

    public onServerProfileUpdate_result deepCopy() {
      return new onServerProfileUpdate_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onServerProfileUpdate_result)
        return this.equals((onServerProfileUpdate_result) that);
      return false;
    }

    public boolean equals(onServerProfileUpdate_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(onServerProfileUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onServerProfileUpdate_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class onServerProfileUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public onServerProfileUpdate_resultStandardScheme getScheme() {
        return new onServerProfileUpdate_resultStandardScheme();
      }
    }

    private static class onServerProfileUpdate_resultStandardScheme extends StandardScheme<onServerProfileUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onServerProfileUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onServerProfileUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onServerProfileUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public onServerProfileUpdate_resultTupleScheme getScheme() {
        return new onServerProfileUpdate_resultTupleScheme();
      }
    }

    private static class onServerProfileUpdate_resultTupleScheme extends TupleScheme<onServerProfileUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onServerProfileUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onServerProfileUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class onEndpointDeregistration_args implements org.apache.thrift.TBase<onEndpointDeregistration_args, onEndpointDeregistration_args._Fields>, java.io.Serializable, Cloneable, Comparable<onEndpointDeregistration_args> {
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onEndpointDeregistration_args");
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new onEndpointDeregistration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onEndpointDeregistration_argsTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftEndpointDeregistrationMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onEndpointDeregistration_args.class, metaDataMap);
    }

    public ThriftEndpointDeregistrationMessage message; // required

    public onEndpointDeregistration_args() {
    }

    public onEndpointDeregistration_args(
        ThriftEndpointDeregistrationMessage message) {
      this();
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onEndpointDeregistration_args(onEndpointDeregistration_args other) {
      if (other.isSetMessage()) {
        this.message = new ThriftEndpointDeregistrationMessage(other.message);
      }
    }

    public onEndpointDeregistration_args deepCopy() {
      return new onEndpointDeregistration_args(this);
    }

    @Override
    public void clear() {
      this.message = null;
    }

    public ThriftEndpointDeregistrationMessage getMessage() {
      return this.message;
    }

    public onEndpointDeregistration_args setMessage(ThriftEndpointDeregistrationMessage message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /**
     * Returns true if field message is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case MESSAGE:
          if (value == null) {
            unsetMessage();
          } else {
            setMessage((ThriftEndpointDeregistrationMessage) value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case MESSAGE:
          return getMessage();

      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case MESSAGE:
          return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onEndpointDeregistration_args)
        return this.equals((onEndpointDeregistration_args) that);
      return false;
    }

    public boolean equals(onEndpointDeregistration_args that) {
      if (that == null)
        return false;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_message = true && (isSetMessage());
      list.add(present_message);
      if (present_message)
        list.add(message);

      return list.hashCode();
    }

    @Override
    public int compareTo(onEndpointDeregistration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onEndpointDeregistration_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (message != null) {
        message.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short) 1, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class onEndpointDeregistration_argsStandardSchemeFactory implements SchemeFactory {
      public onEndpointDeregistration_argsStandardScheme getScheme() {
        return new onEndpointDeregistration_argsStandardScheme();
      }
    }

    private static class onEndpointDeregistration_argsStandardScheme extends StandardScheme<onEndpointDeregistration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onEndpointDeregistration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.message = new ThriftEndpointDeregistrationMessage();
                struct.message.read(iprot);
                struct.setMessageIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onEndpointDeregistration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          struct.message.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onEndpointDeregistration_argsTupleSchemeFactory implements SchemeFactory {
      public onEndpointDeregistration_argsTupleScheme getScheme() {
        return new onEndpointDeregistration_argsTupleScheme();
      }
    }

    private static class onEndpointDeregistration_argsTupleScheme extends TupleScheme<onEndpointDeregistration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onEndpointDeregistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessage()) {
          struct.message.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onEndpointDeregistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.message = new ThriftEndpointDeregistrationMessage();
          struct.message.read(iprot);
          struct.setMessageIsSet(true);
        }
      }
    }

  }

  public static class onEndpointDeregistration_result implements org.apache.thrift.TBase<onEndpointDeregistration_result, onEndpointDeregistration_result._Fields>, java.io.Serializable, Cloneable, Comparable<onEndpointDeregistration_result> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onEndpointDeregistration_result");
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new onEndpointDeregistration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onEndpointDeregistration_resultTupleSchemeFactory());
    }

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onEndpointDeregistration_result.class, metaDataMap);
    }

    public onEndpointDeregistration_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onEndpointDeregistration_result(onEndpointDeregistration_result other) {
    }

    public onEndpointDeregistration_result deepCopy() {
      return new onEndpointDeregistration_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onEndpointDeregistration_result)
        return this.equals((onEndpointDeregistration_result) that);
      return false;
    }

    public boolean equals(onEndpointDeregistration_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(onEndpointDeregistration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onEndpointDeregistration_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static class onEndpointDeregistration_resultStandardSchemeFactory implements SchemeFactory {
      public onEndpointDeregistration_resultStandardScheme getScheme() {
        return new onEndpointDeregistration_resultStandardScheme();
      }
    }

    private static class onEndpointDeregistration_resultStandardScheme extends StandardScheme<onEndpointDeregistration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onEndpointDeregistration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onEndpointDeregistration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onEndpointDeregistration_resultTupleSchemeFactory implements SchemeFactory {
      public onEndpointDeregistration_resultTupleScheme getScheme() {
        return new onEndpointDeregistration_resultTupleScheme();
      }
    }

    private static class onEndpointDeregistration_resultTupleScheme extends TupleScheme<onEndpointDeregistration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onEndpointDeregistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onEndpointDeregistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
