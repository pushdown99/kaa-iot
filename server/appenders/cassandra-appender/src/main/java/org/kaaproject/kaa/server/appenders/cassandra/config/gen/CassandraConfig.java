/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.kaaproject.kaa.server.appenders.cassandra.config.gen;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CassandraConfig extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CassandraConfig\",\"namespace\":\"org.kaaproject.kaa.server.appenders.cassandra.config.gen\",\"fields\":[{\"name\":\"cassandraServers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CassandraServer\",\"fields\":[{\"name\":\"host\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"displayName\":\"Host\",\"weight\":0.75,\"by_default\":\"localhost\"},{\"name\":\"port\",\"type\":\"int\",\"displayName\":\"Port\",\"weight\":0.25,\"by_default\":9042}]}},\"displayName\":\"Cassandra nodes\",\"minRowCount\":1},{\"name\":\"cassandraCredential\",\"type\":[{\"type\":\"record\",\"name\":\"CassandraCredential\",\"fields\":[{\"name\":\"user\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"displayName\":\"User\",\"weight\":0.5,\"by_default\":\"user\"},{\"name\":\"password\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"displayName\":\"Password\",\"weight\":0.5,\"by_default\":\"password\"}],\"optional\":true},\"null\"],\"displayName\":\"Authentication credentials\",\"namespace\":\"org.kaaproject.kaa.server.appenders.cassandra.config.gen\"},{\"name\":\"keySpace\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"displayName\":\"Keyspace name\"},{\"name\":\"tableNamePattern\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"displayName\":\"Table name pattern\",\"by_default\":\"logs_$app_token_$config_hash\"},{\"name\":\"columnMapping\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ColumnMappingElement\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ColumnMappingElementType\",\"symbols\":[\"HEADER_FIELD\",\"EVENT_FIELD\",\"CLIENT_FIELD\",\"SERVER_FIELD\",\"HEADER_JSON\",\"EVENT_JSON\",\"CLIENT_JSON\",\"SERVER_JSON\",\"HEADER_BINARY\",\"EVENT_BINARY\",\"CLIENT_BINARY\",\"SERVER_BINARY\",\"UUID\",\"TS\"]},\"displayName\":\"Type\",\"weight\":0.2,\"by_default\":\"HEADER_FIELD\"},{\"name\":\"value\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"displayName\":\"Value\",\"weight\":0.2,\"by_default\":\"applicationToken\"},{\"name\":\"columnName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"displayName\":\"Name\",\"weight\":0.2,\"by_default\":\"application_token\"},{\"name\":\"columnType\",\"type\":{\"type\":\"enum\",\"name\":\"ColumnType\",\"symbols\":[\"BIGINT\",\"BLOB\",\"BOOLEAN\",\"DOUBLE\",\"FLOAT\",\"INT\",\"TEXT\",\"UUID\"]},\"displayName\":\"Column Type\",\"weight\":0.2,\"by_default\":\"BOOLEAN\"},{\"name\":\"partitionKey\",\"type\":\"boolean\",\"displayName\":\"Is part of partition key?\",\"weight\":0.1,\"by_default\":false},{\"name\":\"clusteringKey\",\"type\":\"boolean\",\"displayName\":\"Is part of clustering key?\",\"weight\":0.1,\"by_default\":false}]}},\"displayName\":\"Column Mapping\",\"minRowCount\":1},{\"name\":\"clusteringMapping\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ClusteringElement\",\"fields\":[{\"name\":\"columnName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"displayName\":\"Name\",\"weight\":0.2,\"by_default\":\"application_token\"},{\"name\":\"order\",\"type\":{\"type\":\"enum\",\"name\":\"OrderType\",\"symbols\":[\"DESC\",\"ASC\"]},\"displayName\":\"Order\",\"weight\":0.2,\"by_default\":\"DESC\"}]}},\"displayName\":\"Clustering\",\"minRowCount\":0},{\"name\":\"cassandraBatchType\",\"type\":[{\"type\":\"enum\",\"name\":\"CassandraBatchType\",\"symbols\":[\"LOGGED\",\"UNLOGGED\"]},\"null\"],\"namespace\":\"org.kaaproject.kaa.server.appenders.cassandra.config.gen\",\"by_default\":\"UNLOGGED\",\"optional\":true,\"displayName\":\"Cassandra batch type\"},{\"name\":\"cassandraSocketOption\",\"type\":[{\"type\":\"record\",\"name\":\"CassandraSocketOption\",\"fields\":[{\"name\":\"sendBufferSize\",\"type\":[\"int\",\"null\"],\"displayName\":\"Set send buffer size\",\"by_default\":8192,\"optional\":true},{\"name\":\"receiveBufferSize\",\"type\":[\"int\",\"null\"],\"displayName\":\"Set receive buffer size\",\"by_default\":8192,\"optional\":true},{\"name\":\"soLinger\",\"type\":[\"int\",\"null\"],\"displayName\":\"Delay before a reset is sent\",\"by_default\":0,\"optional\":true},{\"name\":\"connectionTimeout\",\"type\":[\"int\",\"null\"],\"displayName\":\"Connection timeout (ms)\",\"by_default\":5000,\"optional\":true},{\"name\":\"readTimeout\",\"type\":[\"int\",\"null\"],\"displayName\":\"Read timeout (ms)\",\"by_default\":12000,\"optional\":true},{\"name\":\"reuseAddress\",\"type\":[\"boolean\",\"null\"],\"displayName\":\"Reuse address\",\"by_default\":false,\"optional\":true},{\"name\":\"keepAlive\",\"type\":[\"boolean\",\"null\"],\"displayName\":\"Use keep alive\",\"by_default\":false,\"optional\":true},{\"name\":\"tcpNoDelay\",\"type\":[\"boolean\",\"null\"],\"displayName\":\"Tcp no delay\",\"by_default\":false,\"optional\":true}]},\"null\"],\"namespace\":\"org.kaaproject.kaa.server.appenders.cassandra.config.gen\",\"displayName\":\"Cassandra socket option\",\"optional\":true},{\"name\":\"executorThreadPoolSize\",\"type\":\"int\",\"displayName\":\"Executor thread pool size\",\"by_default\":1},{\"name\":\"callbackThreadPoolSize\",\"type\":\"int\",\"displayName\":\"Callback thread pool size\",\"by_default\":2},{\"name\":\"dataTTL\",\"type\":\"int\",\"displayName\":\"TTL\",\"by_default\":0},{\"name\":\"cassandraWriteConsistencyLevel\",\"type\":[{\"type\":\"enum\",\"name\":\"CassandraWriteConsistencyLevel\",\"symbols\":[\"ANY\",\"ONE\",\"TWO\",\"THREE\",\"QUORUM\",\"ALL\",\"LOCAL_QUORUM\",\"EACH_QUORUM\",\"SERIAL\",\"LOCAL_SERIAL\",\"LOCAL_ONE\"],\"optional\":true},\"null\"],\"namespace\":\"org.kaaproject.kaa.server.appenders.cassandra.config.gen\",\"displayName\":\"Write consistency level\",\"by_default\":\"ONE\"},{\"name\":\"cassandraCompression\",\"type\":[{\"type\":\"enum\",\"name\":\"CassandraCompression\",\"symbols\":[\"NONE\",\"SNAPPY\",\"LZ4\"]},\"null\"],\"namespace\":\"org.kaaproject.kaa.server.appenders.cassandra.config.gen\",\"by_default\":\"NONE\",\"optional\":true,\"displayName\":\"Compression type\"},{\"name\":\"cassandraExecuteRequestType\",\"type\":[{\"type\":\"enum\",\"name\":\"CassandraExecuteRequestType\",\"symbols\":[\"SYNC\",\"ASYNC\"]},\"null\"],\"namespace\":\"org.kaaproject.kaa.server.appenders.cassandra.config.gen\",\"by_default\":\"SYNC\",\"optional\":true,\"displayName\":\"Cassandra execute request type\"}]}");
  private java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> cassandraServers;
  private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential cassandraCredential;
  private java.lang.String keySpace;
  private java.lang.String tableNamePattern;
  private java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ColumnMappingElement> columnMapping;
  private java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ClusteringElement> clusteringMapping;
  private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType cassandraBatchType;
  private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption cassandraSocketOption;
  private int executorThreadPoolSize;
  private int callbackThreadPoolSize;
  private int dataTTL;
  private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel cassandraWriteConsistencyLevel;
  private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression cassandraCompression;
  private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType cassandraExecuteRequestType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}.
   */
  public CassandraConfig() {
  }

  /**
   * All-args constructor.
   */
  public CassandraConfig(java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> cassandraServers, org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential cassandraCredential, java.lang.String keySpace, java.lang.String tableNamePattern, java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ColumnMappingElement> columnMapping, java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ClusteringElement> clusteringMapping, org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType cassandraBatchType, org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption cassandraSocketOption, java.lang.Integer executorThreadPoolSize, java.lang.Integer callbackThreadPoolSize, java.lang.Integer dataTTL, org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel cassandraWriteConsistencyLevel, org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression cassandraCompression, org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType cassandraExecuteRequestType) {
    this.cassandraServers = cassandraServers;
    this.cassandraCredential = cassandraCredential;
    this.keySpace = keySpace;
    this.tableNamePattern = tableNamePattern;
    this.columnMapping = columnMapping;
    this.clusteringMapping = clusteringMapping;
    this.cassandraBatchType = cassandraBatchType;
    this.cassandraSocketOption = cassandraSocketOption;
    this.executorThreadPoolSize = executorThreadPoolSize;
    this.callbackThreadPoolSize = callbackThreadPoolSize;
    this.dataTTL = dataTTL;
    this.cassandraWriteConsistencyLevel = cassandraWriteConsistencyLevel;
    this.cassandraCompression = cassandraCompression;
    this.cassandraExecuteRequestType = cassandraExecuteRequestType;
  }

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  /**
   * Creates a new CassandraConfig RecordBuilder
   */
  public static org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder newBuilder() {
    return new org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder();
  }

  /**
   * Creates a new CassandraConfig RecordBuilder by copying an existing Builder
   */
  public static org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder newBuilder(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder other) {
    return new org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder(other);
  }

  /**
   * Creates a new CassandraConfig RecordBuilder by copying an existing CassandraConfig instance
   */
  public static org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder newBuilder(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig other) {
    return new org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder(other);
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return cassandraServers;
      case 1:
        return cassandraCredential;
      case 2:
        return keySpace;
      case 3:
        return tableNamePattern;
      case 4:
        return columnMapping;
      case 5:
        return clusteringMapping;
      case 6:
        return cassandraBatchType;
      case 7:
        return cassandraSocketOption;
      case 8:
        return executorThreadPoolSize;
      case 9:
        return callbackThreadPoolSize;
      case 10:
        return dataTTL;
      case 11:
        return cassandraWriteConsistencyLevel;
      case 12:
        return cassandraCompression;
      case 13:
        return cassandraExecuteRequestType;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        cassandraServers = (java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer>) value$;
        break;
      case 1:
        cassandraCredential = (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential) value$;
        break;
      case 2:
        keySpace = (java.lang.String) value$;
        break;
      case 3:
        tableNamePattern = (java.lang.String) value$;
        break;
      case 4:
        columnMapping = (java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ColumnMappingElement>) value$;
        break;
      case 5:
        clusteringMapping = (java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ClusteringElement>) value$;
        break;
      case 6:
        cassandraBatchType = (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType) value$;
        break;
      case 7:
        cassandraSocketOption = (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption) value$;
        break;
      case 8:
        executorThreadPoolSize = (java.lang.Integer) value$;
        break;
      case 9:
        callbackThreadPoolSize = (java.lang.Integer) value$;
        break;
      case 10:
        dataTTL = (java.lang.Integer) value$;
        break;
      case 11:
        cassandraWriteConsistencyLevel = (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel) value$;
        break;
      case 12:
        cassandraCompression = (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression) value$;
        break;
      case 13:
        cassandraExecuteRequestType = (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cassandraServers' field.
   */
  public java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> getCassandraServers() {
    return cassandraServers;
  }

  /**
   * Sets the value of the 'cassandraServers' field.
   *
   * @param value the value to set.
   */
  public void setCassandraServers(java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> value) {
    this.cassandraServers = value;
  }

  /**
   * Gets the value of the 'cassandraCredential' field.
   */
  public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential getCassandraCredential() {
    return cassandraCredential;
  }

  /**
   * Sets the value of the 'cassandraCredential' field.
   *
   * @param value the value to set.
   */
  public void setCassandraCredential(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential value) {
    this.cassandraCredential = value;
  }

  /**
   * Gets the value of the 'keySpace' field.
   */
  public java.lang.String getKeySpace() {
    return keySpace;
  }

  /**
   * Sets the value of the 'keySpace' field.
   *
   * @param value the value to set.
   */
  public void setKeySpace(java.lang.String value) {
    this.keySpace = value;
  }

  /**
   * Gets the value of the 'tableNamePattern' field.
   */
  public java.lang.String getTableNamePattern() {
    return tableNamePattern;
  }

  /**
   * Sets the value of the 'tableNamePattern' field.
   *
   * @param value the value to set.
   */
  public void setTableNamePattern(java.lang.String value) {
    this.tableNamePattern = value;
  }

  /**
   * Gets the value of the 'columnMapping' field.
   */
  public java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ColumnMappingElement> getColumnMapping() {
    return columnMapping;
  }

  /**
   * Sets the value of the 'columnMapping' field.
   *
   * @param value the value to set.
   */
  public void setColumnMapping(java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ColumnMappingElement> value) {
    this.columnMapping = value;
  }

  /**
   * Gets the value of the 'clusteringMapping' field.
   */
  public java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ClusteringElement> getClusteringMapping() {
    return clusteringMapping;
  }

  /**
   * Sets the value of the 'clusteringMapping' field.
   *
   * @param value the value to set.
   */
  public void setClusteringMapping(java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ClusteringElement> value) {
    this.clusteringMapping = value;
  }

  /**
   * Gets the value of the 'cassandraBatchType' field.
   */
  public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType getCassandraBatchType() {
    return cassandraBatchType;
  }

  /**
   * Sets the value of the 'cassandraBatchType' field.
   *
   * @param value the value to set.
   */
  public void setCassandraBatchType(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType value) {
    this.cassandraBatchType = value;
  }

  /**
   * Gets the value of the 'cassandraSocketOption' field.
   */
  public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption getCassandraSocketOption() {
    return cassandraSocketOption;
  }

  /**
   * Sets the value of the 'cassandraSocketOption' field.
   *
   * @param value the value to set.
   */
  public void setCassandraSocketOption(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption value) {
    this.cassandraSocketOption = value;
  }

  /**
   * Gets the value of the 'executorThreadPoolSize' field.
   */
  public java.lang.Integer getExecutorThreadPoolSize() {
    return executorThreadPoolSize;
  }

  /**
   * Sets the value of the 'executorThreadPoolSize' field.
   *
   * @param value the value to set.
   */
  public void setExecutorThreadPoolSize(java.lang.Integer value) {
    this.executorThreadPoolSize = value;
  }

  /**
   * Gets the value of the 'callbackThreadPoolSize' field.
   */
  public java.lang.Integer getCallbackThreadPoolSize() {
    return callbackThreadPoolSize;
  }

  /**
   * Sets the value of the 'callbackThreadPoolSize' field.
   *
   * @param value the value to set.
   */
  public void setCallbackThreadPoolSize(java.lang.Integer value) {
    this.callbackThreadPoolSize = value;
  }

  /**
   * Gets the value of the 'dataTTL' field.
   */
  public java.lang.Integer getDataTTL() {
    return dataTTL;
  }

  /**
   * Sets the value of the 'dataTTL' field.
   *
   * @param value the value to set.
   */
  public void setDataTTL(java.lang.Integer value) {
    this.dataTTL = value;
  }

  /**
   * Gets the value of the 'cassandraWriteConsistencyLevel' field.
   */
  public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel getCassandraWriteConsistencyLevel() {
    return cassandraWriteConsistencyLevel;
  }

  /**
   * Sets the value of the 'cassandraWriteConsistencyLevel' field.
   *
   * @param value the value to set.
   */
  public void setCassandraWriteConsistencyLevel(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel value) {
    this.cassandraWriteConsistencyLevel = value;
  }

  /**
   * Gets the value of the 'cassandraCompression' field.
   */
  public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression getCassandraCompression() {
    return cassandraCompression;
  }

  /**
   * Sets the value of the 'cassandraCompression' field.
   *
   * @param value the value to set.
   */
  public void setCassandraCompression(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression value) {
    this.cassandraCompression = value;
  }

  /**
   * Gets the value of the 'cassandraExecuteRequestType' field.
   */
  public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType getCassandraExecuteRequestType() {
    return cassandraExecuteRequestType;
  }

  /**
   * Sets the value of the 'cassandraExecuteRequestType' field.
   *
   * @param value the value to set.
   */
  public void setCassandraExecuteRequestType(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType value) {
    this.cassandraExecuteRequestType = value;
  }

  /**
   * RecordBuilder for CassandraConfig instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CassandraConfig>
      implements org.apache.avro.data.RecordBuilder<CassandraConfig> {

    private java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> cassandraServers;
    private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential cassandraCredential;
    private java.lang.String keySpace;
    private java.lang.String tableNamePattern;
    private java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ColumnMappingElement> columnMapping;
    private java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ClusteringElement> clusteringMapping;
    private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType cassandraBatchType;
    private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption cassandraSocketOption;
    private int executorThreadPoolSize;
    private int callbackThreadPoolSize;
    private int dataTTL;
    private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel cassandraWriteConsistencyLevel;
    private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression cassandraCompression;
    private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType cassandraExecuteRequestType;

    /**
     * Creates a new Builder
     */
    private Builder() {
      super(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder
     */
    private Builder(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cassandraServers)) {
        this.cassandraServers = data().deepCopy(fields()[0].schema(), other.cassandraServers);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cassandraCredential)) {
        this.cassandraCredential = data().deepCopy(fields()[1].schema(), other.cassandraCredential);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.keySpace)) {
        this.keySpace = data().deepCopy(fields()[2].schema(), other.keySpace);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tableNamePattern)) {
        this.tableNamePattern = data().deepCopy(fields()[3].schema(), other.tableNamePattern);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.columnMapping)) {
        this.columnMapping = data().deepCopy(fields()[4].schema(), other.columnMapping);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.clusteringMapping)) {
        this.clusteringMapping = data().deepCopy(fields()[5].schema(), other.clusteringMapping);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cassandraBatchType)) {
        this.cassandraBatchType = data().deepCopy(fields()[6].schema(), other.cassandraBatchType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cassandraSocketOption)) {
        this.cassandraSocketOption = data().deepCopy(fields()[7].schema(), other.cassandraSocketOption);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.executorThreadPoolSize)) {
        this.executorThreadPoolSize = data().deepCopy(fields()[8].schema(), other.executorThreadPoolSize);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.callbackThreadPoolSize)) {
        this.callbackThreadPoolSize = data().deepCopy(fields()[9].schema(), other.callbackThreadPoolSize);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.dataTTL)) {
        this.dataTTL = data().deepCopy(fields()[10].schema(), other.dataTTL);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.cassandraWriteConsistencyLevel)) {
        this.cassandraWriteConsistencyLevel = data().deepCopy(fields()[11].schema(), other.cassandraWriteConsistencyLevel);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.cassandraCompression)) {
        this.cassandraCompression = data().deepCopy(fields()[12].schema(), other.cassandraCompression);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.cassandraExecuteRequestType)) {
        this.cassandraExecuteRequestType = data().deepCopy(fields()[13].schema(), other.cassandraExecuteRequestType);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CassandraConfig instance
     */
    private Builder(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig other) {
      super(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.SCHEMA$);
      if (isValidValue(fields()[0], other.cassandraServers)) {
        this.cassandraServers = data().deepCopy(fields()[0].schema(), other.cassandraServers);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cassandraCredential)) {
        this.cassandraCredential = data().deepCopy(fields()[1].schema(), other.cassandraCredential);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.keySpace)) {
        this.keySpace = data().deepCopy(fields()[2].schema(), other.keySpace);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tableNamePattern)) {
        this.tableNamePattern = data().deepCopy(fields()[3].schema(), other.tableNamePattern);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.columnMapping)) {
        this.columnMapping = data().deepCopy(fields()[4].schema(), other.columnMapping);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.clusteringMapping)) {
        this.clusteringMapping = data().deepCopy(fields()[5].schema(), other.clusteringMapping);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cassandraBatchType)) {
        this.cassandraBatchType = data().deepCopy(fields()[6].schema(), other.cassandraBatchType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cassandraSocketOption)) {
        this.cassandraSocketOption = data().deepCopy(fields()[7].schema(), other.cassandraSocketOption);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.executorThreadPoolSize)) {
        this.executorThreadPoolSize = data().deepCopy(fields()[8].schema(), other.executorThreadPoolSize);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.callbackThreadPoolSize)) {
        this.callbackThreadPoolSize = data().deepCopy(fields()[9].schema(), other.callbackThreadPoolSize);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.dataTTL)) {
        this.dataTTL = data().deepCopy(fields()[10].schema(), other.dataTTL);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.cassandraWriteConsistencyLevel)) {
        this.cassandraWriteConsistencyLevel = data().deepCopy(fields()[11].schema(), other.cassandraWriteConsistencyLevel);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.cassandraCompression)) {
        this.cassandraCompression = data().deepCopy(fields()[12].schema(), other.cassandraCompression);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.cassandraExecuteRequestType)) {
        this.cassandraExecuteRequestType = data().deepCopy(fields()[13].schema(), other.cassandraExecuteRequestType);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Gets the value of the 'cassandraServers' field
     */
    public java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> getCassandraServers() {
      return cassandraServers;
    }

    /**
     * Sets the value of the 'cassandraServers' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraServers(java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> value) {
      validate(fields()[0], value);
      this.cassandraServers = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'cassandraServers' field has been set
     */
    public boolean hasCassandraServers() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'cassandraServers' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraServers() {
      cassandraServers = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'cassandraCredential' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential getCassandraCredential() {
      return cassandraCredential;
    }

    /**
     * Sets the value of the 'cassandraCredential' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraCredential(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential value) {
      validate(fields()[1], value);
      this.cassandraCredential = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'cassandraCredential' field has been set
     */
    public boolean hasCassandraCredential() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'cassandraCredential' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraCredential() {
      cassandraCredential = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'keySpace' field
     */
    public java.lang.String getKeySpace() {
      return keySpace;
    }

    /**
     * Sets the value of the 'keySpace' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setKeySpace(java.lang.String value) {
      validate(fields()[2], value);
      this.keySpace = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'keySpace' field has been set
     */
    public boolean hasKeySpace() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'keySpace' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearKeySpace() {
      keySpace = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'tableNamePattern' field
     */
    public java.lang.String getTableNamePattern() {
      return tableNamePattern;
    }

    /**
     * Sets the value of the 'tableNamePattern' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setTableNamePattern(java.lang.String value) {
      validate(fields()[3], value);
      this.tableNamePattern = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'tableNamePattern' field has been set
     */
    public boolean hasTableNamePattern() {
      return fieldSetFlags()[3];
    }

    /**
     * Clears the value of the 'tableNamePattern' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearTableNamePattern() {
      tableNamePattern = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'columnMapping' field
     */
    public java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ColumnMappingElement> getColumnMapping() {
      return columnMapping;
    }

    /**
     * Sets the value of the 'columnMapping' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setColumnMapping(java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ColumnMappingElement> value) {
      validate(fields()[4], value);
      this.columnMapping = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'columnMapping' field has been set
     */
    public boolean hasColumnMapping() {
      return fieldSetFlags()[4];
    }

    /**
     * Clears the value of the 'columnMapping' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearColumnMapping() {
      columnMapping = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'clusteringMapping' field
     */
    public java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ClusteringElement> getClusteringMapping() {
      return clusteringMapping;
    }

    /**
     * Sets the value of the 'clusteringMapping' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setClusteringMapping(java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ClusteringElement> value) {
      validate(fields()[5], value);
      this.clusteringMapping = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'clusteringMapping' field has been set
     */
    public boolean hasClusteringMapping() {
      return fieldSetFlags()[5];
    }

    /**
     * Clears the value of the 'clusteringMapping' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearClusteringMapping() {
      clusteringMapping = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
     * Gets the value of the 'cassandraBatchType' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType getCassandraBatchType() {
      return cassandraBatchType;
    }

    /**
     * Sets the value of the 'cassandraBatchType' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraBatchType(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType value) {
      validate(fields()[6], value);
      this.cassandraBatchType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
     * Checks whether the 'cassandraBatchType' field has been set
     */
    public boolean hasCassandraBatchType() {
      return fieldSetFlags()[6];
    }

    /**
     * Clears the value of the 'cassandraBatchType' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraBatchType() {
      cassandraBatchType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
     * Gets the value of the 'cassandraSocketOption' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption getCassandraSocketOption() {
      return cassandraSocketOption;
    }

    /**
     * Sets the value of the 'cassandraSocketOption' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraSocketOption(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption value) {
      validate(fields()[7], value);
      this.cassandraSocketOption = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
     * Checks whether the 'cassandraSocketOption' field has been set
     */
    public boolean hasCassandraSocketOption() {
      return fieldSetFlags()[7];
    }

    /**
     * Clears the value of the 'cassandraSocketOption' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraSocketOption() {
      cassandraSocketOption = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
     * Gets the value of the 'executorThreadPoolSize' field
     */
    public java.lang.Integer getExecutorThreadPoolSize() {
      return executorThreadPoolSize;
    }

    /**
     * Sets the value of the 'executorThreadPoolSize' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setExecutorThreadPoolSize(int value) {
      validate(fields()[8], value);
      this.executorThreadPoolSize = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
     * Checks whether the 'executorThreadPoolSize' field has been set
     */
    public boolean hasExecutorThreadPoolSize() {
      return fieldSetFlags()[8];
    }

    /**
     * Clears the value of the 'executorThreadPoolSize' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearExecutorThreadPoolSize() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
     * Gets the value of the 'callbackThreadPoolSize' field
     */
    public java.lang.Integer getCallbackThreadPoolSize() {
      return callbackThreadPoolSize;
    }

    /**
     * Sets the value of the 'callbackThreadPoolSize' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCallbackThreadPoolSize(int value) {
      validate(fields()[9], value);
      this.callbackThreadPoolSize = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
     * Checks whether the 'callbackThreadPoolSize' field has been set
     */
    public boolean hasCallbackThreadPoolSize() {
      return fieldSetFlags()[9];
    }

    /**
     * Clears the value of the 'callbackThreadPoolSize' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCallbackThreadPoolSize() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
     * Gets the value of the 'dataTTL' field
     */
    public java.lang.Integer getDataTTL() {
      return dataTTL;
    }

    /**
     * Sets the value of the 'dataTTL' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setDataTTL(int value) {
      validate(fields()[10], value);
      this.dataTTL = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
     * Checks whether the 'dataTTL' field has been set
     */
    public boolean hasDataTTL() {
      return fieldSetFlags()[10];
    }

    /**
     * Clears the value of the 'dataTTL' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearDataTTL() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
     * Gets the value of the 'cassandraWriteConsistencyLevel' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel getCassandraWriteConsistencyLevel() {
      return cassandraWriteConsistencyLevel;
    }

    /**
     * Sets the value of the 'cassandraWriteConsistencyLevel' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraWriteConsistencyLevel(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel value) {
      validate(fields()[11], value);
      this.cassandraWriteConsistencyLevel = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
     * Checks whether the 'cassandraWriteConsistencyLevel' field has been set
     */
    public boolean hasCassandraWriteConsistencyLevel() {
      return fieldSetFlags()[11];
    }

    /**
     * Clears the value of the 'cassandraWriteConsistencyLevel' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraWriteConsistencyLevel() {
      cassandraWriteConsistencyLevel = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
     * Gets the value of the 'cassandraCompression' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression getCassandraCompression() {
      return cassandraCompression;
    }

    /**
     * Sets the value of the 'cassandraCompression' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraCompression(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression value) {
      validate(fields()[12], value);
      this.cassandraCompression = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
     * Checks whether the 'cassandraCompression' field has been set
     */
    public boolean hasCassandraCompression() {
      return fieldSetFlags()[12];
    }

    /**
     * Clears the value of the 'cassandraCompression' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraCompression() {
      cassandraCompression = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
     * Gets the value of the 'cassandraExecuteRequestType' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType getCassandraExecuteRequestType() {
      return cassandraExecuteRequestType;
    }

    /**
     * Sets the value of the 'cassandraExecuteRequestType' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraExecuteRequestType(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType value) {
      validate(fields()[13], value);
      this.cassandraExecuteRequestType = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
     * Checks whether the 'cassandraExecuteRequestType' field has been set
     */
    public boolean hasCassandraExecuteRequestType() {
      return fieldSetFlags()[13];
    }

    /**
     * Clears the value of the 'cassandraExecuteRequestType' field
     */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraExecuteRequestType() {
      cassandraExecuteRequestType = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    public CassandraConfig build() {
      try {
        CassandraConfig record = new CassandraConfig();
        record.cassandraServers = fieldSetFlags()[0] ? this.cassandraServers : (java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer>) defaultValue(fields()[0]);
        record.cassandraCredential = fieldSetFlags()[1] ? this.cassandraCredential : (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential) defaultValue(fields()[1]);
        record.keySpace = fieldSetFlags()[2] ? this.keySpace : (java.lang.String) defaultValue(fields()[2]);
        record.tableNamePattern = fieldSetFlags()[3] ? this.tableNamePattern : (java.lang.String) defaultValue(fields()[3]);
        record.columnMapping = fieldSetFlags()[4] ? this.columnMapping : (java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ColumnMappingElement>) defaultValue(fields()[4]);
        record.clusteringMapping = fieldSetFlags()[5] ? this.clusteringMapping : (java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.ClusteringElement>) defaultValue(fields()[5]);
        record.cassandraBatchType = fieldSetFlags()[6] ? this.cassandraBatchType : (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType) defaultValue(fields()[6]);
        record.cassandraSocketOption = fieldSetFlags()[7] ? this.cassandraSocketOption : (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption) defaultValue(fields()[7]);
        record.executorThreadPoolSize = fieldSetFlags()[8] ? this.executorThreadPoolSize : (java.lang.Integer) defaultValue(fields()[8]);
        record.callbackThreadPoolSize = fieldSetFlags()[9] ? this.callbackThreadPoolSize : (java.lang.Integer) defaultValue(fields()[9]);
        record.dataTTL = fieldSetFlags()[10] ? this.dataTTL : (java.lang.Integer) defaultValue(fields()[10]);
        record.cassandraWriteConsistencyLevel = fieldSetFlags()[11] ? this.cassandraWriteConsistencyLevel : (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel) defaultValue(fields()[11]);
        record.cassandraCompression = fieldSetFlags()[12] ? this.cassandraCompression : (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression) defaultValue(fields()[12]);
        record.cassandraExecuteRequestType = fieldSetFlags()[13] ? this.cassandraExecuteRequestType : (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
