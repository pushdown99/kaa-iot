/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.kaaproject.kaa.server.appenders.maria.config.gen;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MariaDbConfig extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MariaDbConfig\",\"namespace\":\"org.kaaproject.kaa.server.appenders.maria.config.gen\",\"fields\":[{\"name\":\"mariaServers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"MariaDbServer\",\"fields\":[{\"name\":\"host\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"displayName\":\"Host\",\"by_default\":\"localhost\",\"weight\":0.75},{\"name\":\"port\",\"type\":\"int\",\"displayName\":\"Port\",\"by_default\":3306,\"weight\":0.25}]}},\"displayName\":\"MariaDB nodes\",\"minRowCount\":1},{\"name\":\"dbname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"displayName\":\"DBName\",\"by_default\":\"DBName\"},{\"name\":\"user\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"displayName\":\"User\",\"by_default\":\"user\"},{\"name\":\"password\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"displayName\":\"Password\",\"by_default\":\"password\",\"inputType\":\"password\"},{\"name\":\"maxactive\",\"type\":\"int\",\"displayName\":\"maxActive\",\"by_default\":10},{\"name\":\"maxidle\",\"type\":\"int\",\"displayName\":\"maxIdle\",\"by_default\":10},{\"name\":\"minidle\",\"type\":\"int\",\"displayName\":\"minIdle\",\"by_default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.util.List<org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbServer> mariaServers;
   private java.lang.String dbname;
   private java.lang.String user;
   private java.lang.String password;
   private int maxactive;
   private int maxidle;
   private int minidle;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public MariaDbConfig() {}

  /**
   * All-args constructor.
   */
  public MariaDbConfig(java.util.List<org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbServer> mariaServers, java.lang.String dbname, java.lang.String user, java.lang.String password, java.lang.Integer maxactive, java.lang.Integer maxidle, java.lang.Integer minidle) {
    this.mariaServers = mariaServers;
    this.dbname = dbname;
    this.user = user;
    this.password = password;
    this.maxactive = maxactive;
    this.maxidle = maxidle;
    this.minidle = minidle;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mariaServers;
    case 1: return dbname;
    case 2: return user;
    case 3: return password;
    case 4: return maxactive;
    case 5: return maxidle;
    case 6: return minidle;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mariaServers = (java.util.List<org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbServer>)value$; break;
    case 1: dbname = (java.lang.String)value$; break;
    case 2: user = (java.lang.String)value$; break;
    case 3: password = (java.lang.String)value$; break;
    case 4: maxactive = (java.lang.Integer)value$; break;
    case 5: maxidle = (java.lang.Integer)value$; break;
    case 6: minidle = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'mariaServers' field.
   */
  public java.util.List<org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbServer> getMariaServers() {
    return mariaServers;
  }

  /**
   * Sets the value of the 'mariaServers' field.
   * @param value the value to set.
   */
  public void setMariaServers(java.util.List<org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbServer> value) {
    this.mariaServers = value;
  }

  /**
   * Gets the value of the 'dbname' field.
   */
  public java.lang.String getDbname() {
    return dbname;
  }

  /**
   * Sets the value of the 'dbname' field.
   * @param value the value to set.
   */
  public void setDbname(java.lang.String value) {
    this.dbname = value;
  }

  /**
   * Gets the value of the 'user' field.
   */
  public java.lang.String getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(java.lang.String value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'password' field.
   */
  public java.lang.String getPassword() {
    return password;
  }

  /**
   * Sets the value of the 'password' field.
   * @param value the value to set.
   */
  public void setPassword(java.lang.String value) {
    this.password = value;
  }

  /**
   * Gets the value of the 'maxactive' field.
   */
  public java.lang.Integer getMaxactive() {
    return maxactive;
  }

  /**
   * Sets the value of the 'maxactive' field.
   * @param value the value to set.
   */
  public void setMaxactive(java.lang.Integer value) {
    this.maxactive = value;
  }

  /**
   * Gets the value of the 'maxidle' field.
   */
  public java.lang.Integer getMaxidle() {
    return maxidle;
  }

  /**
   * Sets the value of the 'maxidle' field.
   * @param value the value to set.
   */
  public void setMaxidle(java.lang.Integer value) {
    this.maxidle = value;
  }

  /**
   * Gets the value of the 'minidle' field.
   */
  public java.lang.Integer getMinidle() {
    return minidle;
  }

  /**
   * Sets the value of the 'minidle' field.
   * @param value the value to set.
   */
  public void setMinidle(java.lang.Integer value) {
    this.minidle = value;
  }

  /** Creates a new MariaDbConfig RecordBuilder */
  public static org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder newBuilder() {
    return new org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder();
  }
  
  /** Creates a new MariaDbConfig RecordBuilder by copying an existing Builder */
  public static org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder newBuilder(org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder other) {
    return new org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder(other);
  }
  
  /** Creates a new MariaDbConfig RecordBuilder by copying an existing MariaDbConfig instance */
  public static org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder newBuilder(org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig other) {
    return new org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder(other);
  }
  
  /**
   * RecordBuilder for MariaDbConfig instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MariaDbConfig>
    implements org.apache.avro.data.RecordBuilder<MariaDbConfig> {

    private java.util.List<org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbServer> mariaServers;
    private java.lang.String dbname;
    private java.lang.String user;
    private java.lang.String password;
    private int maxactive;
    private int maxidle;
    private int minidle;

    /** Creates a new Builder */
    private Builder() {
      super(org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mariaServers)) {
        this.mariaServers = data().deepCopy(fields()[0].schema(), other.mariaServers);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dbname)) {
        this.dbname = data().deepCopy(fields()[1].schema(), other.dbname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.password)) {
        this.password = data().deepCopy(fields()[3].schema(), other.password);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.maxactive)) {
        this.maxactive = data().deepCopy(fields()[4].schema(), other.maxactive);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.maxidle)) {
        this.maxidle = data().deepCopy(fields()[5].schema(), other.maxidle);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.minidle)) {
        this.minidle = data().deepCopy(fields()[6].schema(), other.minidle);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing MariaDbConfig instance */
    private Builder(org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig other) {
            super(org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.SCHEMA$);
      if (isValidValue(fields()[0], other.mariaServers)) {
        this.mariaServers = data().deepCopy(fields()[0].schema(), other.mariaServers);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dbname)) {
        this.dbname = data().deepCopy(fields()[1].schema(), other.dbname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.password)) {
        this.password = data().deepCopy(fields()[3].schema(), other.password);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.maxactive)) {
        this.maxactive = data().deepCopy(fields()[4].schema(), other.maxactive);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.maxidle)) {
        this.maxidle = data().deepCopy(fields()[5].schema(), other.maxidle);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.minidle)) {
        this.minidle = data().deepCopy(fields()[6].schema(), other.minidle);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'mariaServers' field */
    public java.util.List<org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbServer> getMariaServers() {
      return mariaServers;
    }
    
    /** Sets the value of the 'mariaServers' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder setMariaServers(java.util.List<org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbServer> value) {
      validate(fields()[0], value);
      this.mariaServers = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'mariaServers' field has been set */
    public boolean hasMariaServers() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'mariaServers' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder clearMariaServers() {
      mariaServers = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'dbname' field */
    public java.lang.String getDbname() {
      return dbname;
    }
    
    /** Sets the value of the 'dbname' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder setDbname(java.lang.String value) {
      validate(fields()[1], value);
      this.dbname = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'dbname' field has been set */
    public boolean hasDbname() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'dbname' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder clearDbname() {
      dbname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'user' field */
    public java.lang.String getUser() {
      return user;
    }
    
    /** Sets the value of the 'user' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder setUser(java.lang.String value) {
      validate(fields()[2], value);
      this.user = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'user' field has been set */
    public boolean hasUser() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'user' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder clearUser() {
      user = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'password' field */
    public java.lang.String getPassword() {
      return password;
    }
    
    /** Sets the value of the 'password' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder setPassword(java.lang.String value) {
      validate(fields()[3], value);
      this.password = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'password' field has been set */
    public boolean hasPassword() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'password' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder clearPassword() {
      password = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'maxactive' field */
    public java.lang.Integer getMaxactive() {
      return maxactive;
    }
    
    /** Sets the value of the 'maxactive' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder setMaxactive(int value) {
      validate(fields()[4], value);
      this.maxactive = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'maxactive' field has been set */
    public boolean hasMaxactive() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'maxactive' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder clearMaxactive() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'maxidle' field */
    public java.lang.Integer getMaxidle() {
      return maxidle;
    }
    
    /** Sets the value of the 'maxidle' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder setMaxidle(int value) {
      validate(fields()[5], value);
      this.maxidle = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'maxidle' field has been set */
    public boolean hasMaxidle() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'maxidle' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder clearMaxidle() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'minidle' field */
    public java.lang.Integer getMinidle() {
      return minidle;
    }
    
    /** Sets the value of the 'minidle' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder setMinidle(int value) {
      validate(fields()[6], value);
      this.minidle = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'minidle' field has been set */
    public boolean hasMinidle() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'minidle' field */
    public org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbConfig.Builder clearMinidle() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public MariaDbConfig build() {
      try {
        MariaDbConfig record = new MariaDbConfig();
        record.mariaServers = fieldSetFlags()[0] ? this.mariaServers : (java.util.List<org.kaaproject.kaa.server.appenders.maria.config.gen.MariaDbServer>) defaultValue(fields()[0]);
        record.dbname = fieldSetFlags()[1] ? this.dbname : (java.lang.String) defaultValue(fields()[1]);
        record.user = fieldSetFlags()[2] ? this.user : (java.lang.String) defaultValue(fields()[2]);
        record.password = fieldSetFlags()[3] ? this.password : (java.lang.String) defaultValue(fields()[3]);
        record.maxactive = fieldSetFlags()[4] ? this.maxactive : (java.lang.Integer) defaultValue(fields()[4]);
        record.maxidle = fieldSetFlags()[5] ? this.maxidle : (java.lang.Integer) defaultValue(fields()[5]);
        record.minidle = fieldSetFlags()[6] ? this.minidle : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
