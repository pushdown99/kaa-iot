/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.kaaproject.kaa.server.appenders.kafka.appender.gen;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LogData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogData\",\"namespace\":\"org.kaaproject.kaa.server.appenders.kafka.appender.gen\",\"fields\":[{\"name\":\"level\",\"type\":{\"type\":\"enum\",\"name\":\"Level\",\"symbols\":[\"DEBUG\",\"ERROR\",\"FATAL\",\"INFO\",\"TRACE\",\"WARN\"]}},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  private org.kaaproject.kaa.server.appenders.kafka.appender.gen.Level level;
  private java.lang.String message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}.
   */
  public LogData() {
  }

  /**
   * All-args constructor.
   */
  public LogData(org.kaaproject.kaa.server.appenders.kafka.appender.gen.Level level, java.lang.String message) {
    this.level = level;
    this.message = message;
  }

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  /**
   * Creates a new LogData RecordBuilder
   */
  public static org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.Builder newBuilder() {
    return new org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.Builder();
  }

  /**
   * Creates a new LogData RecordBuilder by copying an existing Builder
   */
  public static org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.Builder newBuilder(org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.Builder other) {
    return new org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.Builder(other);
  }

  /**
   * Creates a new LogData RecordBuilder by copying an existing LogData instance
   */
  public static org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.Builder newBuilder(org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData other) {
    return new org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.Builder(other);
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return level;
      case 1:
        return message;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        level = (org.kaaproject.kaa.server.appenders.kafka.appender.gen.Level) value$;
        break;
      case 1:
        message = (java.lang.String) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'level' field.
   */
  public org.kaaproject.kaa.server.appenders.kafka.appender.gen.Level getLevel() {
    return level;
  }

  /**
   * Sets the value of the 'level' field.
   *
   * @param value the value to set.
   */
  public void setLevel(org.kaaproject.kaa.server.appenders.kafka.appender.gen.Level value) {
    this.level = value;
  }

  /**
   * Gets the value of the 'message' field.
   */
  public java.lang.String getMessage() {
    return message;
  }

  /**
   * Sets the value of the 'message' field.
   *
   * @param value the value to set.
   */
  public void setMessage(java.lang.String value) {
    this.message = value;
  }

  /**
   * RecordBuilder for LogData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogData>
      implements org.apache.avro.data.RecordBuilder<LogData> {

    private org.kaaproject.kaa.server.appenders.kafka.appender.gen.Level level;
    private java.lang.String message;

    /**
     * Creates a new Builder
     */
    private Builder() {
      super(org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder
     */
    private Builder(org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.level)) {
        this.level = data().deepCopy(fields()[0].schema(), other.level);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LogData instance
     */
    private Builder(org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData other) {
      super(org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.SCHEMA$);
      if (isValidValue(fields()[0], other.level)) {
        this.level = data().deepCopy(fields()[0].schema(), other.level);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Gets the value of the 'level' field
     */
    public org.kaaproject.kaa.server.appenders.kafka.appender.gen.Level getLevel() {
      return level;
    }

    /**
     * Sets the value of the 'level' field
     */
    public org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.Builder setLevel(org.kaaproject.kaa.server.appenders.kafka.appender.gen.Level value) {
      validate(fields()[0], value);
      this.level = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'level' field has been set
     */
    public boolean hasLevel() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'level' field
     */
    public org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.Builder clearLevel() {
      level = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'message' field
     */
    public java.lang.String getMessage() {
      return message;
    }

    /**
     * Sets the value of the 'message' field
     */
    public org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.Builder setMessage(java.lang.String value) {
      validate(fields()[1], value);
      this.message = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'message' field has been set
     */
    public boolean hasMessage() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'message' field
     */
    public org.kaaproject.kaa.server.appenders.kafka.appender.gen.LogData.Builder clearMessage() {
      message = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public LogData build() {
      try {
        LogData record = new LogData();
        record.level = fieldSetFlags()[0] ? this.level : (org.kaaproject.kaa.server.appenders.kafka.appender.gen.Level) defaultValue(fields()[0]);
        record.message = fieldSetFlags()[1] ? this.message : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
